#pragma checksum "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Shared\_DataTable.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "82732389d8d34b5973c253a7f961720df512833f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared__DataTable), @"mvc.1.0.view", @"/Views/Shared/_DataTable.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Shared/_DataTable.cshtml", typeof(AspNetCore.Views_Shared__DataTable))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\_ViewImports.cshtml"
using Uarung.Web;

#line default
#line hidden
#line 2 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\_ViewImports.cshtml"
using Uarung.Web.Models;

#line default
#line hidden
#line 3 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\_ViewImports.cshtml"
using Uarung.Model;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"82732389d8d34b5973c253a7f961720df512833f", @"/Views/Shared/_DataTable.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a454cc3725c524beb5749c7dfbd5fbc51bf3557c", @"/Views/_ViewImports.cshtml")]
    public class Views_Shared__DataTable : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Object>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/javascript"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/vue.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(15, 45, true);
            WriteLiteral("\r\n<input type=\"hidden\" id=\"source-data-table\"");
            EndContext();
            BeginWriteAttribute("value", " value=\'", 60, "\'", 90, 1);
#line 3 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Shared\_DataTable.cshtml"
WriteAttributeValue("", 68, Json.Serialize(Model), 68, 22, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(91, 6, true);
            WriteLiteral("/>\r\n\r\n");
            EndContext();
            BeginContext(97, 59, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d04a93f030264fa2b23ba1187e672b17", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(156, 3496, true);
            WriteLiteral(@"
<script type=""text/x-template"" id=""anchor"">
    <a :href=""href"">{{text}}</a>
</script>
<script type=""text/x-template"" id=""delete-form"">
    <form :action=""action"" method=""delete"">
        <button type=""submit"" class=""btn btn-danger btn-sm p-0 lh-0 rounded-circle"">
            <svg xmlns=""http://www.w3.org/2000/svg"" 
                 width=""24"" 
                 height=""24"" 
                 viewBox=""0 0 24 24"" 
                 fill=""none"" 
                 stroke=""currentColor"" 
                 stroke-width=""2"" 
                 stroke-linecap=""round"" 
                 stroke-linejoin=""round"" 
                 class=""feather feather-x"">
                    <line x1=""18"" y1=""6"" x2=""6"" y2=""18""></line>
                    <line x1=""6"" y1=""6"" x2=""18"" y2=""18""></line>
            </svg>
        </button>
    </form>
</script>
<script type=""text/x-template"" id=""data-table-template"">
    <div>
        <div class=""d-flex mb-5"">
            <h3 class=""d-inline-flex"">{{ title }}</h3>
      ");
            WriteLiteral(@"      <div class=""d-flex align-items-center ml-auto"">
                <div class=""input-group mr-3"">
                    <div class=""input-group-prepend"">
                        <div class=""input-group-text bg-transparent"">
                            <svg xmlns=""http://www.w3.org/2000/svg"" 
                                 class=""feather feather-search sc-dnqmqq jxshSx"" 
                                 width=""24"" 
                                 height=""24"" 
                                 viewBox=""0 0 24 24"" 
                                 fill=""none"" 
                                 stroke=""currentColor"" 
                                 stroke-width=""2"" 
                                 stroke-linecap=""round"" 
                                 stroke-linejoin=""round"">
                                <circle cx=""11"" cy=""11"" r=""8""></circle>
                                <line x1=""21"" y1=""21"" x2=""16.65"" y2=""16.65""></line>
                            </svg>
                        </d");
            WriteLiteral(@"iv>
                    </div>
                    <input type=""text"" class=""form-control"" v-model=""searchKeyword"" :placeholder=""searchPlaceholder""/>
                </div>
                <slot name=""action""></slot>
            </div>
        </div>
        <table class=""table"">
            <thead class=""thead-light"">
                <tr>
                    <th v-for=""th in theads"">
                        {{ th }}
                    </th>
                </tr>
            </thead>
            <tbody v-if=""paginatedTbodies.length > 0"">
                <tr v-for=""tb in paginatedTbodies"">
                    <td v-for=""tbItem in tb"">
                        <template v-if=""tbItem.toString().includes('<a>')"">
                            <anchor :data-href=""tbItem""></anchor>
                        </template>
                        <template v-else-if=""tbItem.toString().includes('<x>')"">
                            <delete-form :data-delete=""tbItem""></delete-form>
                     ");
            WriteLiteral(@"   </template>
                        <template v-else>
                            {{ tbItem }}
                        </template>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class=""d-flex justify-content-center"" v-if=""pageCount > 1"">
            <div class=""btn-group"">
                <button class=""btn btn-outline-primary"" :disabled=""pageNumber === 0"" ");
            EndContext();
            BeginContext(3653, 173, true);
            WriteLiteral("@click=\"pageNumber--\">\r\n                    Prev\r\n                </button>\r\n                <button class=\"btn btn-outline-primary\" :disabled=\"pageNumber >= pageCount - 1\" ");
            EndContext();
            BeginContext(3827, 3322, true);
            WriteLiteral(@"@click=""pageNumber++"">
                    Next
                </button>
            </div>
        </div>
    </div>
</script>
<script type=""text/javascript"">
    const data = JSON.parse(document.getElementById(""source-data-table"").value);

    function toCurrency(val) {
        if (typeof(val) !== ""number"")
            return val;

        return new Intl.NumberFormat().format(val);
    }

    Vue.component(""anchor"", {
        template: ""#anchor"",
        props: {
            dataHref: {
                type: String,
                required: true,
                default: """"
            }
        },
        computed: {
            href: function () {
                return this.dataHref.split(""<a>"")[1].trim();
            },
            text: function () {
                return this.dataHref.split(""<a>"")[0].trim();
            }
        }
    });

    Vue.component(""delete-form"", {
        template: ""#delete-form"",
        props: {
            dataDelete: {
       ");
            WriteLiteral(@"         type: String,
                required: true,
                default: """"
            }
        },
        computed: {
            action: function() {
                return this.dataDelete.replace(/<x>/gi, """").trim();
            }
        }
    });

    Vue.component(""data-table"", {
        template: ""#data-table-template"",
        data: function() {
            return {
                pageNumber: 0,
                searchKeyword: """"
            };
        },
        props: {
            title: {
                type: String,
                default: """"
            },
            theads: {
                type: Array,
                required: true,
                default: []
            },
            tbodies: {
                type: Array,
                required: true,
                default: []
            },
            size: {
                type: Number,
                required: false,
                default: 10
            },
            searc");
            WriteLiteral(@"hPlaceholder: {
                type: String,
                required: false,
                default: """"
            },
            searchByIndex: {
                type: Number,
                required: false,
                default: 0
            }
        },
        computed: {
            pageCount: function() {
                const dividedPage = this.tbodies.length / this.size;
                const base = Math.floor(dividedPage);

                if (dividedPage % 1 > 0)
                    return base + 1;

                return base;
            },
            paginatedTbodies: function() {
                const start = this.pageNumber * this.size;
                const end = start + this.size;

                return this.filteredTbodies.slice(start, end);
            },
            filteredTbodies: function () {
                if (this.seachKeyword === """")
                    return this.tbodies;

                return this.tbodies
                    .filter(");
            WriteLiteral("function(tb) {\r\n                        return tb[this.searchByIndex].toString().toLowerCase()\r\n                            .includes(this.searchKeyword.toLowerCase());\r\n                    }.bind(this));\r\n            }\r\n        }\r\n    });\r\n</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Object> Html { get; private set; }
    }
}
#pragma warning restore 1591
