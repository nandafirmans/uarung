#pragma checksum "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9a346d46da1bcec42ed26044f7ad5a0234b1d547"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Transaction_SalesRegister), @"mvc.1.0.view", @"/Views/Transaction/SalesRegister.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Transaction/SalesRegister.cshtml", typeof(AspNetCore.Views_Transaction_SalesRegister))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\_ViewImports.cshtml"
using Uarung.Web;

#line default
#line hidden
#line 2 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\_ViewImports.cshtml"
using Uarung.Web.Models;

#line default
#line hidden
#line 3 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\_ViewImports.cshtml"
using Uarung.Model;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9a346d46da1bcec42ed26044f7ad5a0234b1d547", @"/Views/Transaction/SalesRegister.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a454cc3725c524beb5749c7dfbd5fbc51bf3557c", @"/Views/_ViewImports.cshtml")]
    public class Views_Transaction_SalesRegister : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<SalesRegisterViewModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/javascript"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/vue.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/axios.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/sweetalert.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("v-for", new global::Microsoft.AspNetCore.Html.HtmlString("pt in paymentTypes"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute(":value", new global::Microsoft.AspNetCore.Html.HtmlString("pt"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(31, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 3 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
  
    ViewData[Constant.ViewDataKey.Title] = "Sales Register";
    var apiHost = ViewData[Constant.ConfigKey.ApiHost];

    var paymentTypes = new[]
    {
        Constant.PaymentType.Cash,
        Constant.PaymentType.Card,
        Constant.PaymentType.Other
    };

#line default
#line hidden
            BeginContext(314, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            DefineSection("ScriptHeader", async() => {
                BeginContext(340, 1177, true);
                WriteLiteral(@"
    <style>
        .product-item .card-img-top{
            height: 100px;
            background-position: center;
            background-size: cover;
        }
        .pointer {
            cursor: pointer
        }

        [v-cloak] {
            display: none;
        }

        .modal-mask {
            position: fixed;
            z-index: 9998;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, .5);
            display: table;
            transition: opacity .3s ease;
        }

        .modal-enter {
            opacity: 0;
        }

        .modal-leave-active {
            opacity: 0;
        }

        .modal-enter .modal-container,
        .modal-leave-active .modal-container {
            -webkit-transform: scale(1.1);
            transform: scale(1.1);
        }

        .loader {
            border: 3px solid #ddd;
            border-radius: 999px;
            bo");
                WriteLiteral("rder-top: 3px solid #007bff;\r\n            width: 24px;\r\n            height: 24px;\r\n            animation: spin 1s linear infinite;\r\n        }\r\n\r\n        ");
                EndContext();
                BeginContext(1518, 197, true);
                WriteLiteral("@keyframes spin {\r\n            0% {\r\n                 transform: rotate(0);\r\n            }\r\n            100% {\r\n                 transform: rotate(360deg);\r\n            }\r\n        }\r\n    </style>\r\n");
                EndContext();
            }
            );
            BeginContext(1718, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            DefineSection("ScriptFooter", async() => {
                BeginContext(1744, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(1750, 59, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e073a0dc49b44edd850aa9f55e26eef2", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1809, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(1815, 65, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ac692bd4433d42b9a9cf19bd3668f865", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1880, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(1886, 70, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ccf1da79bf074fd9a501bb74e76927aa", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1956, 2003, true);
                WriteLiteral(@"

    <script type=""text/x-template"" id=""modal-template"">
        <transition name=""modal"">
            <div class=""modal-mask"">
                <div class=""modal-dialog"" :class=""modalDialogCssclass"">
                    <div class=""modal-content"">
                        <div class=""modal-header"" v-if=""hasHeaderSlot"">
                            <slot name=""header""></slot>
                        </div>
                        <div class=""modal-body"">
                            <slot name=""body""></slot>
                        </div>
                        <div class=""modal-footer"" v-if=""hasFooterSlot"">
                            <slot name=""footer""></slot>
                        </div>
                    </div>
                </div>
            </div>
        </transition>
    </script>

    <script type=""text/x-template"" id=""opened-bills"">
        <table class=""table"">
            <thead>
                <tr>
                    <th class=""border-top-0"">#</th>
             ");
                WriteLiteral(@"       <th class=""border-top-0"">Notes</th>
                    <th class=""border-top-0"">Id</th>
                    <th class=""border-top-0"">Total Price</th>
                </tr>
            </thead>
            <tr v-for=""(t, index) in holdTransactions"">
                <td>{{index}}</td>
                <td>{{t.notes}}</td>
                <td>
                    <button type=""btn"" class=""btn btn-link btn-sm"">
                        {{t.id}}
                    </button>
                </td>
                <td>{{t.totalPrice}}</td>
            </tr>
        </table>
    </script>

    <script type=""text/javascript"">
        const dataCategories = JSON.parse(document.getElementById(""productCategory"").value);
        const dataProducts = JSON.parse(document.getElementById(""product"").value);
        const dataPaymentTypes = JSON.parse(document.getElementById(""paymentType"").value);

        window.actionUrl = {
            getDiscount : """);
                EndContext();
                BeginContext(3960, 29, false);
#line 132 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
                      Write(Url.Action("Get", "Discount"));

#line default
#line hidden
                EndContext();
                BeginContext(3989, 37, true);
                WriteLiteral("\",\r\n            createTransaction : \"");
                EndContext();
                BeginContext(4027, 35, false);
#line 133 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
                            Write(Url.Action("Create", "Transaction"));

#line default
#line hidden
                EndContext();
                BeginContext(4062, 38, true);
                WriteLiteral("\",\r\n            getTransactionHold : \"");
                EndContext();
                BeginContext(4101, 40, false);
#line 134 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
                             Write(Url.Action("GetHoldOnly", "Transaction"));

#line default
#line hidden
                EndContext();
                BeginContext(4141, 9687, true);
                WriteLiteral(@"""
        }

        function axiosCatch(err) {
            const errorMessage = typeof (err) === ""string""
                ? err
                : ""sorry, some error occured"";

            swal(errorMessage, """", ""warning"");
        }

        Vue.filter(""toCurrency"",
            function (val) {
                if (typeof(val) !== ""number"")
                    return val;

                return new Intl.NumberFormat().format(val);

            });

        Vue.component(""opened-bills"", {
            template: ""#opened-bills"",
            props: [""holdTransactions""],
        });

        Vue.component(""modal"", {
            template: ""#modal-template"",
            props : [""modalDialogCssclass""],
            computed: {
                hasHeaderSlot: function () {
                    return !!this.$slots.header;
                },
                hasFooterSlot: function() {
                    return !!this.$slots.footer;
                }
            }
        });

     ");
                WriteLiteral(@"   const app = new Vue({
            el: ""#salesRegister"",
            data: {
                tabs : [""Current"", ""Open Bills""],
                categories: dataCategories,
                products: dataProducts,
                paymentTypes: dataPaymentTypes,
                holdTransactions: [],
                activeCategory: dataCategories[0].name,
                selectedTab: """",
                selectedProducts: [],
                searchKeyword: """",
                selectedPaymentType: """",
                discount: {
                    code: """",
                    type: """",
                    value: 0,
                    isValid: false
                },
                showConfirmModal: false,
                showLoadingModal : false
            },
            methods: {
                selectTab: function(tabName) {
                    this.selectedTab = tabName;
                },
                selectCategory: function(categoryName) {
                    this.activeC");
                WriteLiteral(@"ategory = categoryName;
                },
                selectProduct: function (product) {
                    const isAny = this.selectedProducts
                        .filter(function (p) { return p.product.id === product.id; })
                        .length > 0;

                    if (isAny) {
                        const index = this.selectedProducts
                            .map(function (p) { return p.product.id })
                            .indexOf(product.id);

                        this.selectedProducts[index].quantity += 1;
                        this.onQuantityUpdate(index);
                    } else {
                        this.selectedProducts = this.selectedProducts
                            .concat({
                                product: product,
                                quantity: 1,
                                notes: null,
                                showNotes: false,
                                totalPrice: product.price
     ");
                WriteLiteral(@"                       });
                    }
                },
                removeSelectedProduct: function(index) {
                    this.selectedProducts = this.selectedProducts
                        .filter(function (f, i) { return i !== index });
                },
                clearSelectedProducts : function () {
                    this.selectedProducts = [];
                },
                onQuantityUpdate: function (index) {
                    const value = this.selectedProducts[index].quantity;

                    if (value <= 0 || isNaN(value))
                        this.selectedProducts[index].quantity = 1;
                    else if (value > 50)
                        this.selectedProducts[index].quantity = 50;

                    const totalPrice = this.selectedProducts[index].product.price * this.selectedProducts[index].quantity;
                    this.selectedProducts[index].totalPrice = totalPrice;
                },
                setDiscount");
                WriteLiteral(@": function(discount) {
                    if (discount === undefined) 
                        discount = {
                            isValid : false,
                            code : """",
                            type: """",
                            value: 0,
                        };
                    
                    this.discount.isValid = discount.isValid;
                    this.discount.type = discount.type;
                    this.discount.value = discount.value;
                    this.discount.code = discount.code;
                },
                fetchDiscount: function() {
                    const url = window.actionUrl.getDiscount + ""/"" + this.discount.code;

                    axios.get(url)
                        .then(function(response) {
                            console.log(response);
                            const isOk = response.data.status.type === ""Success"";

                            if(isOk) {
                                const di");
                WriteLiteral(@"scount = response.data.collections[0];
                                this.setDiscount(Object.assign(discount, { isValid : true}));
                            }
                            else 
                                this.setDiscount(undefined);

                        }.bind(this));
                },
                fetchHoldTransaction: function() {
                    axios
                        .get(window.actionUrl.getTransactionHold)
                        .then(function(response) {
                            const data = response.data;

                            if (data.status.type === ""Error"")
                                throw data.status.message;

                            this.holdTransactions = data.collections;
                        }.bind(this))
                        .catch(axiosCatch);
                },
                submitTransaction: function (paymentStatus) {
                    this.showConfirmModal = false;
                    this.sh");
                WriteLiteral(@"owLoadingModal = true;
                    const self = this;
                    const url = window.actionUrl.createTransaction;

                    const request = {
                        paymentStatus: paymentStatus,
                        paymentType: this.selectedPaymentType,
                        selectedProducts: this.selectedProducts
                            .map(function(sp) {
                                return {
                                    quantity: sp.quantity,
                                    notes: sp.notes,
                                    product: {
                                        id: sp.product.id
                                    }
                                }
                            }),
                        discount: {
                            code: this.discount.code
                        }
                    };
                    
                    axios
                        .post(url, request)
           ");
                WriteLiteral(@"             .then(function(response) {
                            const data = response.data;
                            self.showLoadingModal = false;

                            if (data.status.type === ""Error"")
                                throw data.status.message;   
                        })
                        .catch(axiosCatch);
                }
            },
            computed: {
                filteredProducts: function () {
                    return this.products
                        .filter(function(p) {
                            if (this.activeCategory === ""All"") return p;

                            return p.categoryName === this.activeCategory;
                        }.bind(this))
                        .filter(function (p) {
                            return p.name.toLowerCase().includes(this.searchKeyword.toLowerCase());
                        }.bind(this));;
                },
                totalPrice: function() {
                    if (");
                WriteLiteral(@"!(this.selectedProducts.length > 0))
                        return 0;

                    return this.selectedProducts
                        .reduce(function (currVal, sp) {return currVal += sp.totalPrice}, 0);
                },
                totalPriceWithDiscount: function() {
                    if (this.discountValue > this.totalPrice) {
                        swal(""Sorry, discount cannot be applied"", """", ""warning"");
                        this.setDiscount(undefined);

                        return this.totalPrice;
                    }

                    return this.totalPrice - this.discountValue;
                },
                discountValue: function () {
                    if(this.discount.type === ""Percentage"") 
                        return this.totalPrice * this.discount.value / 100;

                    return this.discount.value;
                },
                isAnySelectedProducts: function() {
                    return this.selectedProducts.length >");
                WriteLiteral(@" 0;
                },
                isPaymentTypeSelected: function() {
                    return this.selectedPaymentType !== """";
                },
                isDiscountCodeEmpty: function() {
                    return this.discount.code === """";
                }
            },
            mounted: function() {
                this.selectTab(this.tabs[0]);
                this.fetchHoldTransaction();
            }
        });
    </script>
");
                EndContext();
            }
            );
            BeginContext(13831, 22, true);
            WriteLiteral("\r\n<input type=\"hidden\"");
            EndContext();
            BeginWriteAttribute("value", " value=\'", 13853, "\'", 13894, 1);
#line 375 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
WriteAttributeValue("", 13861, Json.Serialize(Model.Categories), 13861, 33, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(13895, 46, true);
            WriteLiteral(" id=\"productCategory\" />\r\n<input type=\"hidden\"");
            EndContext();
            BeginWriteAttribute("value", " value=\'", 13941, "\'", 13980, 1);
#line 376 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
WriteAttributeValue("", 13949, Json.Serialize(Model.Products), 13949, 31, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(13981, 38, true);
            WriteLiteral(" id=\"product\" />\r\n<input type=\"hidden\"");
            EndContext();
            BeginWriteAttribute("value", " value=\'", 14019, "\'", 14056, 1);
#line 377 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
WriteAttributeValue("", 14027, Json.Serialize(paymentTypes), 14027, 29, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(14057, 429, true);
            WriteLiteral(@" id=""paymentType"" />

<div class=""d-flex mb-3"">
    <h3 class=""mr-auto"">Sales Register</h3>
</div>

<div class=""card mb-4"" id=""salesRegister"">
    <div class=""card-header"" v-cloak>
        <ul class=""nav nav-tabs card-header-tabs"">
            <li class=""nav-item"" v-for=""(t, index) in tabs"">
                <a class=""nav-link pointer"" 
                   :class=""{ active : t === selectedTab }"" 
                   ");
            EndContext();
            BeginContext(14487, 742, true);
            WriteLiteral(@"@click=""selectTab(tabs[index])"">
                    {{t}}
                </a>
            </li>
        </ul>
    </div>
    <div class=""card-body"" v-cloak>
        <div class=""row"" v-if=""selectedTab === tabs[0]"">
            <div class=""col"">
                <div class=""form-group"">
                    <input class=""form-control"" type=""text"" placeholder=""Search Product Here..."" v-model=""searchKeyword""/>
                </div>
                <div class=""row"">
                    <div class=""col-3"">
                        <ul class=""list-group"">
                            <li v-for=""c in categories"" 
                                :class=""{ active : c.name === activeCategory }"" 
                                ");
            EndContext();
            BeginContext(15230, 525, true);
            WriteLiteral(@"@click=""selectCategory(c.name)""
                                class=""list-group-item pointer"">
                                {{c.name}}
                            </li>
                        </ul>
                    </div>
                    <div class=""col"">
                        <div class=""row"" v-if=""filteredProducts.length > 0"">
                            <div class=""product-item col-4 mb-4"" v-for=""p in filteredProducts"">
                                <div class=""card pointer"" :title=""p.name"" ");
            EndContext();
            BeginContext(15756, 89, true);
            WriteLiteral("@click=\"selectProduct(p)\">\r\n                                    <div class=\"card-img-top\"");
            EndContext();
            BeginWriteAttribute(":style", " :style=\"", 15845, "\"", 15908, 9);
            WriteAttributeValue("", 15854, "{backgroundImage:", 15854, 17, true);
            WriteAttributeValue(" ", 15871, "\'url(", 15872, 6, true);
#line 416 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
WriteAttributeValue("", 15877, apiHost, 15877, 8, false);

#line default
#line hidden
            WriteAttributeValue("", 15885, "\'", 15885, 1, true);
            WriteAttributeValue(" ", 15886, "+", 15887, 2, true);
            WriteAttributeValue(" ", 15888, "p.images[0]", 15889, 12, true);
            WriteAttributeValue(" ", 15900, "+", 15901, 2, true);
            WriteAttributeValue(" ", 15902, "\')\'", 15903, 4, true);
            WriteAttributeValue(" ", 15906, "}", 15907, 2, true);
            EndWriteAttribute();
            BeginContext(15909, 1041, true);
            WriteLiteral(@"></div>
                                    <div class=""card-body pt-1 pb-1"">
                                        <p class=""card-title text-truncate mb-1"">{{p.name}}</p>
                                        <p class=""card-text"">{{ p.price | toCurrency }}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <h5 class=""mt-3"" v-else>
                            There's nothing in here..
                        </h5>
                    </div>
                </div>
            </div>
            <div class=""col-5"">
                <div class=""card bg-light"">
                    <div class=""card-header bg-transparent border-bottom-0 d-flex"">
                        <h5 class=""font-weight-normal mb-0 mr-auto"">Current Sales</h5>
                        <template v-if=""isAnySelectedProducts"">
                            <button class=""btn btn-outline-secondary btn-sm lh");
            WriteLiteral("-1 align-bottom\" ");
            EndContext();
            BeginContext(16951, 211, true);
            WriteLiteral("@click=\"clearSelectedProducts\">\r\n                                Clear\r\n                            </button>\r\n                            <button class=\"btn btn-outline-secondary btn-sm ml-2 lh-1 align-bottom\" ");
            EndContext();
            BeginContext(17163, 1325, true);
            WriteLiteral(@"@click=""swal('not yet implemented')"">
                                Hold
                            </button>
                        </template>
                    </div>
                    <div class=""card-body"">
                        <template v-if=""isAnySelectedProducts"">
                            <table class=""table table-sm"">
                                <tr>
                                    <th class=""border-top-0 text-left"" style=""width: 170px"">Item</th>
                                    <th class=""border-top-0"" style=""width: 70px"">Quantity</th>
                                    <th class=""border-top-0"">Price</th>
                                    <th class=""border-top-0"" style=""width: 64px""></th>
                                </tr>
                                <template v-for=""(sp, index) in selectedProducts"">
                                    <tr>
                                        <td class=""text-left align-middle"">{{ sp.product.name }}</td>
       ");
            WriteLiteral(@"                                 <td class=""align-middle"">
                                            <input type=""number""
                                                   class=""form-control form-control-sm form-control-plaintext text-center""
                                                   ");
            EndContext();
            BeginContext(18489, 652, true);
            WriteLiteral(@"@input=""onQuantityUpdate(index)""
                                                   v-model.number=""sp.quantity""/>
                                        </td>
                                        <td class=""align-middle"">{{ sp.totalPrice | toCurrency }}</td>
                                        <td class=""align-middle"">
                                            <button type=""button""
                                                    title=""add notes""
                                                    class=""btn btn-sm btn-outline-secondary border-0 lh-0 p-1 rounded-circle""
                                                    ");
            EndContext();
            BeginContext(19142, 1533, true);
            WriteLiteral(@"@click=""sp.showNotes = !sp.showNotes"">
                                                <svg v-if=""!sp.showNotes"" xmlns=""http://www.w3.org/2000/svg""width=""24"" height=""24"" viewBox=""0 0 24 24"" fill=""none"" stroke=""currentColor"" stroke-width=""2"" stroke-linecap=""round"" stroke-linejoin=""round""
                                                     class=""feather feather-edit-2 sc-dnqmqq jxshSx"">
                                                    <polygon points=""16 3 21 8 8 21 3 21 3 16 16 3""></polygon>
                                                </svg>
                                                <svg v-else-if=""sp.showNotes"" class=""feather feather-edit sc-dnqmqq jxshSx"" xmlns=""http://www.w3.org/2000/svg"" width=""24"" height=""24"" viewBox=""0 0 24 24"" fill=""none"" stroke=""currentColor"" stroke-width=""2"" stroke-linecap=""round"" stroke-linejoin=""round"">
                                                    <path d=""M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34""></path>
                          ");
            WriteLiteral(@"                          <polygon points=""18 2 22 6 12 16 8 16 8 12 18 2""></polygon>
                                                </svg>
                                            </button>
                                            <button type=""button""
                                                    title=""remove""
                                                    class=""btn btn-outline-danger btn-sm border-0 rounded-circle lh-0 p-1""
                                                    ");
            EndContext();
            BeginContext(20676, 2063, true);
            WriteLiteral(@"@click=""removeSelectedProduct(index)"">
                                                <svg xmlns=""http://www.w3.org/2000/svg"" width=""24"" height=""24"" viewBox=""0 0 24 24"" fill=""none"" stroke=""currentColor"" stroke-width=""2"" stroke-linecap=""round"" stroke-linejoin=""round"" class=""feather feather-x"">
                                                    <line x1=""18"" y1=""6"" x2=""6"" y2=""18""></line>
                                                    <line x1=""6"" y1=""6"" x2=""18"" y2=""18""></line>
                                                </svg>
                                            </button>
                                        </td>
                                    </tr>
                                    <tr v-if=""sp.showNotes"">
                                        <td colspan=""4"" class=""border-top-0"">
                                            <input type=""text"" 
                                                   class=""form-control form-control-sm""
                                     ");
            WriteLiteral(@"              v-model=""sp.notes""/>
                                        </td>
                                    </tr>
                                </template>
                            </table>
                            <div class=""input-group mb-3"" v-if=""!discount.isValid"">
                                <input type=""text"" 
                                        class=""form-control form-control-sm pl-2 pr-2"" 
                                        placeholder=""Apply discount code here...""
                                        v-model=""discount.code""
                                        :class=""{ 'form-control-plaintext' : isDiscountCodeEmpty }""
                                        :readonly=""discount.isValid""/>
                                <div class=""input-group-append"" v-if=""!isDiscountCodeEmpty"">
                                    <button type=""button"" 
                                            class=""btn btn-outline-primary btn-sm""
                             ");
            WriteLiteral("               ");
            EndContext();
            BeginContext(22740, 842, true);
            WriteLiteral(@"@click=""fetchDiscount"">
                                        Apply
                                    </button>
                                </div>
                            </div>
                            <div class=""d-flex align-items-center border mb-3 p-2 rounded"" v-else>
                                <p class=""mr-auto mb-0"">
                                    Discount ({{discount.code}})
                                </p>
                                <p class=""mb-0 text-success"">
                                    - {{ discountValue | toCurrency }}
                                </p>
                                <button type=""button"" 
                                    class=""btn btn-outline-danger btn-sm border-0 rounded-circle btn-times-close ml-2""
                                    ");
            EndContext();
            BeginContext(23583, 424, true);
            WriteLiteral(@"@click=""setDiscount(undefined)"">
                                    <span>&times;</span>
                                </button>
                            </div>
                        </template>
                        <p v-else>
                            Please choose products...
                        </p>
                        <button class=""btn btn-primary btn-block btn-lg"" v-if=""totalPrice > 0"" ");
            EndContext();
            BeginContext(24008, 831, true);
            WriteLiteral(@"@click=""showConfirmModal = true"">
                            Charge <span class=""font-weight-bold"">{{ totalPriceWithDiscount | toCurrency }}</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div v-else-if=""selectedTab === tabs[1]"">
            <opened-bills :hold-transactions=""holdTransactions""></opened-bills>
        </div>
        <modal v-if=""showLoadingModal"" modal-dialog-cssclass=""modal-sm"">
            <div slot=""body"" class=""d-flex justify-content-center align-items-center"">
                <div class=""loader""></div>
                <h5 class=""font-weight-bold mb-0 text-black-50 ml-2"">
                    Loading...
                </h5>
            </div>
        </modal>
        <modal v-if=""showConfirmModal"" ");
            EndContext();
            BeginContext(24840, 14, true);
            WriteLiteral("@onOkClick=\"\" ");
            EndContext();
            BeginContext(24855, 306, true);
            WriteLiteral(@"@request-close=""showConfirmModal = false"">
            <h5 class=""mb-0"" slot=""header"">Payment Confirmation</h5>
            <div class=""form-group"" slot=""body"">
                <label>Payment Type</label>
                <select class=""form-control"" v-model=""selectedPaymentType"">
                    ");
            EndContext();
            BeginContext(25161, 52, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ec00ab4917954757a73010805238d71a", async() => {
                BeginContext(25187, 17, true);
                WriteLiteral("Please select one");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("disabled", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(25213, 22, true);
            WriteLiteral("\r\n                    ");
            EndContext();
            BeginContext(25235, 62, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b9163566bce8431fb558159bd46a5b32", async() => {
                BeginContext(25282, 6, true);
                WriteLiteral("{{pt}}");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(25297, 145, true);
            WriteLiteral("\r\n                </select>\r\n            </div>\r\n            <template slot=\"footer\">\r\n                <button class=\"btn btn-outline-secondary\" ");
            EndContext();
            BeginContext(25443, 179, true);
            WriteLiteral("@click=\"showConfirmModal = false, selectedPaymentType = \'\'\">\r\n                    Cancel\r\n                </button>\r\n                <button class=\"btn\" \r\n                        ");
            EndContext();
            BeginContext(25623, 27, true);
            WriteLiteral("@click=\"submitTransaction(\'");
            EndContext();
            BeginContext(25651, 27, false);
#line 560 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
                                               Write(Constant.PaymentStatus.Paid);

#line default
#line hidden
            EndContext();
            BeginContext(25678, 381, true);
            WriteLiteral(@"')""
                        :class=""{'btn-success' : isPaymentTypeSelected, 'btn-secondary' : !isPaymentTypeSelected}"" 
                        :disabled=""!isPaymentTypeSelected"">
                    Received <span class=""font-weight-bold"">{{ totalPriceWithDiscount | toCurrency }}</span>
                </button>
            </template>
        </modal>
    </div>
</div>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<SalesRegisterViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
