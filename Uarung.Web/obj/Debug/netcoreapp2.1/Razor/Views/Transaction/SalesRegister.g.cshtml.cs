#pragma checksum "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "51fe62dd01ecf5c55e023d3ef4120e8499b8ca40"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Transaction_SalesRegister), @"mvc.1.0.view", @"/Views/Transaction/SalesRegister.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Transaction/SalesRegister.cshtml", typeof(AspNetCore.Views_Transaction_SalesRegister))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\_ViewImports.cshtml"
using Uarung.Web;

#line default
#line hidden
#line 2 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\_ViewImports.cshtml"
using Uarung.Web.Models;

#line default
#line hidden
#line 3 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\_ViewImports.cshtml"
using Uarung.Model;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"51fe62dd01ecf5c55e023d3ef4120e8499b8ca40", @"/Views/Transaction/SalesRegister.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a454cc3725c524beb5749c7dfbd5fbc51bf3557c", @"/Views/_ViewImports.cshtml")]
    public class Views_Transaction_SalesRegister : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<SalesRegisterViewModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/javascript"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/vue.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/axios.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/sweetalert.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("v-for", new global::Microsoft.AspNetCore.Html.HtmlString("pt in paymentTypes"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "pt", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(31, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 3 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
  
    ViewData[Constant.ViewDataKey.Title] = "Sales Register";
    var apiHost = ViewData[Constant.ConfigKey.ApiHost];

    var paymentTypes = new[]
    {
        Constant.PaymentType.Cash,
        Constant.PaymentType.Card,
        Constant.PaymentType.Other
    };

#line default
#line hidden
            BeginContext(314, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            DefineSection("ScriptHeader", async() => {
                BeginContext(340, 931, true);
                WriteLiteral(@"
    <style>
        .product-item .card-img-top{
            height: 100px;
            background-position: center;
            background-size: cover;
        }
        .pointer {
            cursor: pointer
        }

        [v-cloak] {
            display: none;
        }

        .modal-mask {
            position: fixed;
            z-index: 9998;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, .5);
            display: table;
            transition: opacity .3s ease;
        }

        .modal-enter {
            opacity: 0;
        }

        .modal-leave-active {
            opacity: 0;
        }

        .modal-enter .modal-container,
        .modal-leave-active .modal-container {
            -webkit-transform: scale(1.1);
            transform: scale(1.1);
        }
    </style>
");
                EndContext();
            }
            );
            BeginContext(1274, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            DefineSection("ScriptFooter", async() => {
                BeginContext(1300, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(1306, 63, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "72f387b40f664e8aa6737550f3f4ff6b", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1369, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(1375, 65, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "060409087e3141e9b156b39af7865177", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1440, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(1446, 70, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "fc632ce3787a4068aacf0e08b445fda0", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1516, 136, true);
                WriteLiteral("\r\n    \r\n    <script type=\"text/x-template\" id=\"modal-template\">\r\n        <transition name=\"modal\">\r\n            <div class=\"modal-mask\" ");
                EndContext();
                BeginContext(1653, 593, true);
                WriteLiteral(@"@click=""$emit('onRequestClose')"">
                <div class=""modal-dialog"">
                    <div class=""modal-content"">
                        <div class=""modal-header"" v-if=""hasHeaderSlot"">
                            <slot name=""header""></slot>
                        </div>
                        <div class=""modal-body"">
                            <slot name=""body""></slot>
                        </div>
                        <div class=""modal-footer"">
                            <slot name=""footer"">
                                <button class=""btn btn-primary"" ");
                EndContext();
                BeginContext(2247, 4080, true);
                WriteLiteral(@"@click=""$emit('onOkClick')"">
                                    OK
                                </button>
                            </slot>
                        </div>
                    </div>
                </div>
            </div>
        </transition>
    </script>

    <script type=""text/javascript"">
        const dataCategories = JSON.parse(document.getElementById(""productCategory"").value);
        const dataProducts = JSON.parse(document.getElementById(""product"").value);
        const dataPaymentTypes = JSON.parse(document.getElementById(""paymentType"").value);

        Vue.filter(""toCurrency"",
            function (val) {
                if (typeof(val) !== ""number"")
                    return val;

                return new Intl.NumberFormat().format(val);

            });

        Vue.component(""modal"", {
            template: ""#modal-template"",
            computed: {
                hasHeaderSlot: function () {
                    console.log(this.$slots.he");
                WriteLiteral(@"ader, this.$slots);
                    return !!this.$slots.header;
                }
            }
        });

        const app = new Vue({
            el: ""#salesRegister"",
            data: {
                tabs : [""Current"", ""Open Bills""],
                selectedTab: """",
                categories: dataCategories,
                products: dataProducts,
                activeCategory: dataCategories[0].name,
                selectedProducts: [],
                searchKeyword: """",
                discount: {
                    code: """",
                    type: """",
                    value: 0,
                    isValid: false
                },
                showConfirmModal: false,
                paymentTypes: dataPaymentTypes,
                selectedPaymentType: """",
            },
            methods: {
                selectTab: function(tabName) {
                    this.selectedTab = tabName;
                },
                selectCategory: function(categ");
                WriteLiteral(@"oryName) {
                    this.activeCategory = categoryName;
                },
                selectProduct: function (product) {
                    const selectedProduct = {
                        product: product,
                        quantity: 1,
                        totalPrice: product.price
                    };

                    this.selectedProducts = this.selectedProducts.concat(selectedProduct);
                },
                removeSelectedProduct: function(index) {
                    this.selectedProducts = this.selectedProducts
                        .filter(function (f, i) { return i !== index });
                },
                clearSelectedProducts : function () {
                    this.selectedProducts = [];
                },
                updateQuantity: function (event, index) {
                    const value = parseInt(event.target.value);

                    if (value <= 0 || isNaN(value)) {
                        event.target.valu");
                WriteLiteral(@"e = 1;
                        return;
                    }

                    const totalPrice = this.selectedProducts[index].product.price * value;
                    this.selectedProducts[index].quantity = value;
                    this.selectedProducts[index].totalPrice = totalPrice;
                },
                setDiscount: function(discount) {
                    if (discount === undefined) 
                        discount = {
                            isValid : false,
                            code : """",
                            type: """",
                            value: 0,
                        };
                    
                    this.discount.isValid = discount.isValid;
                    this.discount.type = discount.type;
                    this.discount.value = discount.value;
                    this.discount.code = discount.code;
                },
                fetchDiscount: function() {
                    const url = """);
                EndContext();
                BeginContext(6328, 29, false);
#line 183 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
                            Write(Url.Action("Get", "Discount"));

#line default
#line hidden
                EndContext();
                BeginContext(6357, 2674, true);
                WriteLiteral(@"/"" + this.discount.code;
                    axios.get(url)
                        .then(function(response) {
                            console.log(response);
                            const isOk = response.data.status.type === ""Success"";

                            if(isOk) {
                                const discount = response.data.collection[0];
                                this.setDiscount(Object.assign(discount, { isValid : true}));
                            }
                            else 
                                this.setDiscount(undefined);

                        }.bind(this));
                }
            },
            computed: {
                filteredProducts: function () {
                    return this.products
                        .filter(function(p) {
                            if (this.activeCategory === ""All"") return p;

                            return p.categoryName === this.activeCategory;
                        }.bind(this))
");
                WriteLiteral(@"                        .filter(function (p) {
                            return p.name.toLowerCase().includes(this.searchKeyword.toLowerCase());
                        }.bind(this));;
                },
                totalPrice: function() {
                    if (!(this.selectedProducts.length > 0))
                        return 0;

                    return this.selectedProducts
                        .reduce(function (currVal, sp) {
                            return (currVal += sp.totalPrice);
                        }, 0);
                },
                totalPriceWithDiscount: function() {
                    if (this.discountValue > this.totalPrice) {
                        swal(""Sorry, discount cannot be applied"", """", ""warning"");
                        this.setDiscount(undefined);

                        return this.totalPrice;
                    }

                    return this.totalPrice - this.discountValue;
                },
                discountValue: ");
                WriteLiteral(@"function () {
                    if(this.discount.type === ""Percentage"") 
                        return this.totalPrice * this.discount.value / 100;

                    return this.discount.value;
                },
                isAnySelectedProducts: function() {
                    return this.selectedProducts.length > 0;
                },
                isDiscountCodeEmpty: function() {
                    return this.discount.code === """";
                }
            },
            mounted: function() {
                this.selectTab(this.tabs[0]);
            }
        });
    </script>
");
                EndContext();
            }
            );
            BeginContext(9034, 22, true);
            WriteLiteral("\r\n<input type=\"hidden\"");
            EndContext();
            BeginWriteAttribute("value", " value=\'", 9056, "\'", 9097, 1);
#line 250 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
WriteAttributeValue("", 9064, Json.Serialize(Model.Categories), 9064, 33, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(9098, 46, true);
            WriteLiteral(" id=\"productCategory\" />\r\n<input type=\"hidden\"");
            EndContext();
            BeginWriteAttribute("value", " value=\'", 9144, "\'", 9183, 1);
#line 251 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
WriteAttributeValue("", 9152, Json.Serialize(Model.Products), 9152, 31, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(9184, 38, true);
            WriteLiteral(" id=\"product\" />\r\n<input type=\"hidden\"");
            EndContext();
            BeginWriteAttribute("value", " value=\'", 9222, "\'", 9259, 1);
#line 252 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
WriteAttributeValue("", 9230, Json.Serialize(paymentTypes), 9230, 29, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(9260, 436, true);
            WriteLiteral(@" id=""paymentType"" />

<div class=""d-flex mb-3"">
    <h3 class=""mr-auto"">Sales Register</h3>
</div>

<div class=""card text-center"" id=""salesRegister"">
    <div class=""card-header"" v-cloak>
        <ul class=""nav nav-tabs card-header-tabs"">
            <li class=""nav-item"" v-for=""(t, index) in tabs"">
                <a class=""nav-link pointer"" 
                   :class=""{ active : t === selectedTab }"" 
                   ");
            EndContext();
            BeginContext(9697, 742, true);
            WriteLiteral(@"@click=""selectTab(tabs[index])"">
                    {{t}}
                </a>
            </li>
        </ul>
    </div>
    <div class=""card-body"" v-cloak>
        <div class=""row"" v-if=""selectedTab === tabs[0]"">
            <div class=""col"">
                <div class=""form-group"">
                    <input class=""form-control"" type=""text"" placeholder=""Search Product Here..."" v-model=""searchKeyword""/>
                </div>
                <div class=""row"">
                    <div class=""col-3"">
                        <ul class=""list-group"">
                            <li v-for=""c in categories"" 
                                :class=""{ active : c.name === activeCategory }"" 
                                ");
            EndContext();
            BeginContext(10440, 525, true);
            WriteLiteral(@"@click=""selectCategory(c.name)""
                                class=""list-group-item pointer"">
                                {{c.name}}
                            </li>
                        </ul>
                    </div>
                    <div class=""col"">
                        <div class=""row"" v-if=""filteredProducts.length > 0"">
                            <div class=""product-item col-4 mb-4"" v-for=""p in filteredProducts"">
                                <div class=""card pointer"" :title=""p.name"" ");
            EndContext();
            BeginContext(10966, 89, true);
            WriteLiteral("@click=\"selectProduct(p)\">\r\n                                    <div class=\"card-img-top\"");
            EndContext();
            BeginWriteAttribute(":style", " :style=\"", 11055, "\"", 11118, 9);
            WriteAttributeValue("", 11064, "{backgroundImage:", 11064, 17, true);
            WriteAttributeValue(" ", 11081, "\'url(", 11082, 6, true);
#line 291 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
WriteAttributeValue("", 11087, apiHost, 11087, 8, false);

#line default
#line hidden
            WriteAttributeValue("", 11095, "\'", 11095, 1, true);
            WriteAttributeValue(" ", 11096, "+", 11097, 2, true);
            WriteAttributeValue(" ", 11098, "p.images[0]", 11099, 12, true);
            WriteAttributeValue(" ", 11110, "+", 11111, 2, true);
            WriteAttributeValue(" ", 11112, "\')\'", 11113, 4, true);
            WriteAttributeValue(" ", 11116, "}", 11117, 2, true);
            EndWriteAttribute();
            BeginContext(11119, 1041, true);
            WriteLiteral(@"></div>
                                    <div class=""card-body pt-1 pb-1"">
                                        <p class=""card-title text-truncate mb-1"">{{p.name}}</p>
                                        <p class=""card-text"">{{ p.price | toCurrency }}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <h5 class=""mt-3"" v-else>
                            There's nothing in here..
                        </h5>
                    </div>
                </div>
            </div>
            <div class=""col-5"">
                <div class=""card bg-light"">
                    <div class=""card-header bg-transparent border-bottom-0 d-flex"">
                        <h5 class=""font-weight-normal mb-0 mr-auto"">Current Sales</h5>
                        <template v-if=""isAnySelectedProducts"">
                            <button class=""btn btn-outline-secondary btn-sm lh");
            WriteLiteral("-1 align-bottom\" ");
            EndContext();
            BeginContext(12161, 211, true);
            WriteLiteral("@click=\"clearSelectedProducts\">\r\n                                Clear\r\n                            </button>\r\n                            <button class=\"btn btn-outline-secondary btn-sm ml-2 lh-1 align-bottom\" ");
            EndContext();
            BeginContext(12373, 1317, true);
            WriteLiteral(@"@click=""swal('not yet implemented')"">
                                Hold
                            </button>
                        </template>
                    </div>
                    <div class=""card-body"">
                        <template v-if=""isAnySelectedProducts"">
                            <table class=""table table-sm"">
                                <tr>
                                    <th class=""border-top-0 text-left"" style=""width: 170px"">Item</th>
                                    <th class=""border-top-0"" style=""width: 70px"">Quantity</th>
                                    <th class=""border-top-0"">Price</th>
                                    <th class=""border-top-0"" style=""width: 20px""></th>
                                </tr>
                                <tr v-for=""(sp, index) in selectedProducts"">
                                    <td class=""text-left align-middle"">{{ sp.product.name }}</td>
                                    <td class=""align-middle");
            WriteLiteral(@""">
                                        <input type=""number""
                                            class=""form-control form-control-sm form-control-plaintext text-center""
                                            :value=""sp.quantity""
                                            ");
            EndContext();
            BeginContext(13691, 486, true);
            WriteLiteral(@"@input=""updateQuantity($event, index)""/>
                                    </td>
                                    <td class=""align-middle"">{{ sp.totalPrice | toCurrency }}</td>
                                    <td class=""align-middle"">
                                        <button type=""button""
                                                class=""btn btn-outline-danger btn-sm border-0 rounded-circle btn-times-close""
                                                ");
            EndContext();
            BeginContext(14178, 1107, true);
            WriteLiteral(@"@click=""removeSelectedProduct(index)"">
                                            <span>&times;</span>
                                        </button>
                                    </td>
                                </tr>
                            </table>
                            <div class=""input-group mb-3"" v-if=""!discount.isValid"">
                                <input type=""text"" 
                                        class=""form-control form-control-sm pl-2 pr-2"" 
                                        placeholder=""Apply discount code here...""
                                        v-model=""discount.code""
                                        :class=""{ 'form-control-plaintext' : isDiscountCodeEmpty }""
                                        :readonly=""discount.isValid""/>
                                <div class=""input-group-append"" v-if=""!isDiscountCodeEmpty"">
                                    <button type=""button"" 
                                            c");
            WriteLiteral("lass=\"btn btn-outline-primary btn-sm\"\r\n                                            ");
            EndContext();
            BeginContext(15286, 842, true);
            WriteLiteral(@"@click=""fetchDiscount"">
                                        Apply
                                    </button>
                                </div>
                            </div>
                            <div class=""d-flex align-items-center border mb-3 p-2 rounded"" v-else>
                                <p class=""mr-auto mb-0"">
                                    Discount ({{discount.code}})
                                </p>
                                <p class=""mb-0 text-success"">
                                    - {{ discountValue | toCurrency }}
                                </p>
                                <button type=""button"" 
                                    class=""btn btn-outline-danger btn-sm border-0 rounded-circle btn-times-close ml-2""
                                    ");
            EndContext();
            BeginContext(16129, 424, true);
            WriteLiteral(@"@click=""setDiscount(undefined)"">
                                    <span>&times;</span>
                                </button>
                            </div>
                        </template>
                        <p v-else>
                            Please choose products...
                        </p>
                        <button class=""btn btn-primary btn-block btn-lg"" v-if=""totalPrice > 0"" ");
            EndContext();
            BeginContext(16554, 414, true);
            WriteLiteral(@"@click=""showConfirmModal = true"">
                            Charge <span class=""font-weight-bold"">{{ totalPriceWithDiscount | toCurrency }}</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div v-else-if=""selectedTab === tabs[1]"">
            <p>Opened Bills...</p>
        </div>
        <modal v-if=""isConfirmModal"" ");
            EndContext();
            BeginContext(16969, 14, true);
            WriteLiteral("@onOkClick=\"\" ");
            EndContext();
            BeginContext(16984, 225, true);
            WriteLiteral("@onRequestClose=\"showConfirmModal = false\">\r\n            <div class=\"form-group\">\r\n                <label>Payment Type</label>\r\n                <select class=\"form-control\" v-model=\"selectedPaymentType\">\r\n                    ");
            EndContext();
            BeginContext(17209, 52, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4e9e8f647cff4f1b9e07cd160b078825", async() => {
                BeginContext(17235, 17, true);
                WriteLiteral("Please select one");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("disabled", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(17261, 22, true);
            WriteLiteral("\r\n                    ");
            EndContext();
            BeginContext(17283, 61, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7cdeb2e0a501448eb3e41870399558ab", async() => {
                BeginContext(17329, 6, true);
                WriteLiteral("{{pt}}");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_6.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(17344, 85, true);
            WriteLiteral("\r\n                </select>\r\n            </div>\r\n        </modal>\r\n    </div>\r\n</div>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<SalesRegisterViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
