#pragma checksum "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "599a9c21ff9d30eac4a07a50906ea5995511d6bd"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Transaction_SalesRegister), @"mvc.1.0.view", @"/Views/Transaction/SalesRegister.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Transaction/SalesRegister.cshtml", typeof(AspNetCore.Views_Transaction_SalesRegister))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\_ViewImports.cshtml"
using Uarung.Web;

#line default
#line hidden
#line 2 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\_ViewImports.cshtml"
using Uarung.Web.Models;

#line default
#line hidden
#line 3 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\_ViewImports.cshtml"
using Uarung.Model;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"599a9c21ff9d30eac4a07a50906ea5995511d6bd", @"/Views/Transaction/SalesRegister.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a454cc3725c524beb5749c7dfbd5fbc51bf3557c", @"/Views/_ViewImports.cshtml")]
    public class Views_Transaction_SalesRegister : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<SalesRegisterViewModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/javascript"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/vue.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/axios.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/sweetalert.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("v-for", new global::Microsoft.AspNetCore.Html.HtmlString("pt in paymentTypes"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute(":value", new global::Microsoft.AspNetCore.Html.HtmlString("pt"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(31, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 3 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
  
    ViewData[Constant.ViewDataKey.Title] = "Sales Register";
    var apiHost = ViewData[Constant.ConfigKey.ApiHost];

    var paymentTypes = new[]
    {
        Constant.PaymentType.Cash,
        Constant.PaymentType.Card,
        Constant.PaymentType.Other
    };

#line default
#line hidden
            BeginContext(314, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            DefineSection("ScriptHeader", async() => {
                BeginContext(340, 1298, true);
                WriteLiteral(@"
    <style>
        .product-item .card-img-top{
            height: 100px;
            background-position: center;
            background-size: cover;
        }
        .pointer {
            cursor: pointer
        }

        [v-cloak] {
            display: none;
        }

        .modal-mask {
            position: fixed;
            z-index: 9998;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, .5);
            display: table;
            transition: opacity .3s ease;
        }

        .modal-enter {
            opacity: 0;
        }

        .modal-leave-active {
            opacity: 0;
        }

        .modal-enter .modal-container,
        .modal-leave-active .modal-container {
            -webkit-transform: scale(1.1);
            transform: scale(1.1);
        }

        .loading-modal .modal-header, 
        .loading-modal .modal-footer {
            display: none");
                WriteLiteral(@";
        }

        .loader {
            border: 3px solid #ddd;
            border-radius: 999px;
            border-top: 3px solid #007bff;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
        }

        ");
                EndContext();
                BeginContext(1639, 197, true);
                WriteLiteral("@keyframes spin {\r\n            0% {\r\n                 transform: rotate(0);\r\n            }\r\n            100% {\r\n                 transform: rotate(360deg);\r\n            }\r\n        }\r\n    </style>\r\n");
                EndContext();
            }
            );
            BeginContext(1839, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            DefineSection("ScriptFooter", async() => {
                BeginContext(1865, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(1871, 63, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cff2be63298a4c98919f94b237142483", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1934, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(1940, 65, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "fc57029ea6aa4fe69975561ca003acc8", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(2005, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(2011, 70, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ec9e30d644cb4bdd9d808718f4d9950d", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(2081, 1478, true);
                WriteLiteral(@"

    <script type=""text/x-template"" id=""modal-template"">
        <transition name=""modal"">
            <div class=""modal-mask"">
                <div class=""modal-dialog"" :class=""modalDialogCssclass"">
                    <div class=""modal-content"">
                        <div class=""modal-header"" v-if=""hasHeaderSlot"">
                            <slot name=""header""></slot>
                        </div>
                        <div class=""modal-body"">
                            <slot name=""body""></slot>
                        </div>
                        <div class=""modal-footer"" v-if=""hasFooterSlot"">
                            <slot name=""footer""></slot>
                        </div>
                    </div>
                </div>
            </div>
        </transition>
    </script>

    <script type=""text/x-template"" id=""opened-bills"">
        <table class=""table"" v-if=""isAnyTransaction"">
            <thead>
                <tr>
                    <th class=""border-top-");
                WriteLiteral(@"0"">#</th>
                    <th class=""border-top-0"">Notes</th>
                    <th class=""border-top-0"">Id</th>
                    <th class=""border-top-0"">Total Price</th>
                </tr>
            </thead>
            <tr v-for=""(t, index) in holdTransactions"">
                <td>{{index + 1}}</td>
                <td>{{t.notes}}</td>
                <td>
                    <button type=""btn"" class=""btn btn-link btn-sm"" ");
                EndContext();
                BeginContext(3560, 685, true);
                WriteLiteral(@"@click=""$emit('on-select', t.id)"">
                        {{t.id}}
                    </button>
                </td>
                <td>{{(t.totalPrice - t.discount.value) | toCurrency}}</td>
            </tr>
        </table>
        <h5 class=""mt-2"" v-else>There's no opened bills...</h5>
    </script>

    <script type=""text/javascript"">
        const dataCategories = JSON.parse(document.getElementById(""productCategory"").value);
        const dataProducts = JSON.parse(document.getElementById(""product"").value);
        const dataPaymentTypes = JSON.parse(document.getElementById(""paymentType"").value);

        window.actionUrl = {
            getDiscount: """);
                EndContext();
                BeginContext(4246, 29, false);
#line 138 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
                     Write(Url.Action("Get", "Discount"));

#line default
#line hidden
                EndContext();
                BeginContext(4275, 36, true);
                WriteLiteral("\",\r\n            createTransaction: \"");
                EndContext();
                BeginContext(4312, 60, false);
#line 139 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
                           Write(Url.Action("Submit", "Transaction", new {id = string.Empty}));

#line default
#line hidden
                EndContext();
                BeginContext(4372, 36, true);
                WriteLiteral("\",\r\n            updateTransaction: \"");
                EndContext();
                BeginContext(4409, 56, false);
#line 140 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
                           Write(Url.Action("Submit", "Transaction", new {id = "update"}));

#line default
#line hidden
                EndContext();
                BeginContext(4465, 37, true);
                WriteLiteral("\",\r\n            getTransactionHold: \"");
                EndContext();
                BeginContext(4503, 40, false);
#line 141 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
                            Write(Url.Action("GetHoldOnly", "Transaction"));

#line default
#line hidden
                EndContext();
                BeginContext(4543, 24, true);
                WriteLiteral("\",\r\n            print: \"");
                EndContext();
                BeginContext(4568, 34, false);
#line 142 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
               Write(Url.Action("Print", "Transaction"));

#line default
#line hidden
                EndContext();
                BeginContext(4602, 6757, true);
                WriteLiteral(@"""
        }

        function axiosCatch(err) {
            const errorMessage = typeof (err) === ""string""
                ? err
                : ""sorry, some error occured"";

            swal(errorMessage, """", ""warning"");
        }

        Vue.filter(""toCurrency"",
            function(val) {
                if (typeof(val) !== ""number"")
                    return val;

                return new Intl.NumberFormat().format(val);

            });

        Vue.component(""opened-bills"",
            {
                template: ""#opened-bills"",
                props: {
                    holdTransactions: {
                        type: Array,
                        default: []
                    }
                },
                computed: {
                    isAnyTransaction: function() {
                        return this.holdTransactions.length > 0;
                    }
                }
            });

        Vue.component(""modal"",
            {
             ");
                WriteLiteral(@"   template: ""#modal-template"",
                props: [""modalDialogCssclass""],
                computed: {
                    hasHeaderSlot: function() {
                        return !!this.$slots.header;
                    },
                    hasFooterSlot: function() {
                        return !!this.$slots.footer;
                    }
                }
            });

        const app = new Vue({
            el: ""#salesRegister"",
            data: {
                tabs: [""Current"", ""Open Bills""],
                categories: dataCategories,
                products: dataProducts,
                paymentTypes: dataPaymentTypes,
                holdTransactions: [],
                activeCategory: dataCategories[0].name,
                selectedTab: """",
                searchKeyword: """",
                selectedProducts: [],
                selectedPaymentType: """",
                selectedTransaction: null,
                transactionNotes: """",
                disc");
                WriteLiteral(@"ount: {
                    code: """",
                    type: """",
                    value: 0,
                    isValid: false
                },
                isPayment: true,
                showConfirmModal: false,
                showLoadingModal: false,
                showPrintWindow: false,
            },
            methods: {
                selectTab: function(tabIndex) {
                    this.selectedTab = this.tabs[tabIndex];
                },
                selectCategory: function(categoryName) {
                    this.activeCategory = categoryName;
                },
                selectProduct: function(product) {
                    const isAny = this.selectedProducts
                        .filter(function(p) { return p.product.id === product.id; })
                        .length >
                        0;

                    if (isAny) {
                        const index = this.selectedProducts
                            .map(function(p) { ");
                WriteLiteral(@"return p.product.id })
                            .indexOf(product.id);

                        this.selectedProducts[index].quantity += 1;
                        this.onQuantityUpdate(index);
                    } else {
                        this.selectedProducts = this.selectedProducts
                            .concat({
                                product: product,
                                quantity: 1,
                                notes: null,
                                showNotes: false,
                                totalPrice: product.price
                            });
                    }
                },
                removeSelectedProduct: function(index) {
                    this.selectedProducts = this.selectedProducts
                        .filter(function(f, i) { return i !== index });
                },
                clearSelectedProducts: function() {
                    this.selectedProducts = [];
                },
              ");
                WriteLiteral(@"  onQuantityUpdate: function(index) {
                    const value = this.selectedProducts[index].quantity;

                    if (value <= 0 || isNaN(value))
                        this.selectedProducts[index].quantity = 1;
                    else if (value > 50)
                        this.selectedProducts[index].quantity = 50;

                    const totalPrice = this.selectedProducts[index].product.price *
                        this.selectedProducts[index].quantity;
                    this.selectedProducts[index].totalPrice = totalPrice;
                },
                setDiscount: function(discount) {
                    if (discount === undefined)
                        discount = {
                            isValid: false,
                            code: """",
                            type: """",
                            value: 0,
                        };

                    this.discount.isValid = discount.isValid;
                    this.discount.type");
                WriteLiteral(@" = discount.type;
                    this.discount.value = discount.value;
                    this.discount.code = discount.code;
                },
                fetchDiscount: function() {
                    this.showLoadingModal = true;
                    const url = window.actionUrl.getDiscount + ""/"" + this.discount.code;

                    axios.get(url)
                        .then(function(response) {
                            this.showLoadingModal = false;
                            const isOk = response.data.status.type === ""Success"";

                            if (isOk) {
                                const discount = response.data.collections[0];
                                this.setDiscount(Object.assign(discount, { isValid: true }));
                            } else
                                this.setDiscount(undefined);

                        }.bind(this));
                },
                fetchHoldTransaction: function() {
                    ");
                WriteLiteral(@"axios
                        .get(window.actionUrl.getTransactionHold)
                        .then(function(response) {
                            const data = response.data;

                            if (data.status.type === ""Error"")
                                throw data.status.message;

                            this.holdTransactions = data.collections;
                        }.bind(this))
                        .catch(axiosCatch);
                },
                getRequest: function () {
                    const paymentStatus = this.isPayment
                        ? """);
                EndContext();
                BeginContext(11360, 27, false);
#line 314 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
                      Write(Constant.PaymentStatus.Paid);

#line default
#line hidden
                EndContext();
                BeginContext(11387, 30, true);
                WriteLiteral("\"\r\n                        : \"");
                EndContext();
                BeginContext(11418, 27, false);
#line 315 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
                      Write(Constant.PaymentStatus.Hold);

#line default
#line hidden
                EndContext();
                BeginContext(11445, 6834, true);
                WriteLiteral(@""";

                    const request = {
                        id: """",
                        paymentStatus: paymentStatus,
                        paymentType: this.selectedPaymentType,
                        selectedProducts: this.selectedProducts
                            .map(function(sp) {
                                return {
                                    quantity: sp.quantity,
                                    notes: sp.notes,
                                    product: {
                                        id: sp.product.id
                                    }
                                }
                            }),
                        discount: {
                            code: this.discount.code
                        },
                        notes: this.transactionNotes
                    };

                    if (this.isSelectedTransaction) {
                        request.id = this.selectedTransaction.id;
                      ");
                WriteLiteral(@"  request.totalPrice = this.totalPrice;
                    }

                    return request;
                },
                submitTransaction: function() {
                    this.showConfirmModal = false;
                    this.showLoadingModal = true;
                    
                    const url = this.isSelectedTransaction
                        ? window.actionUrl.updateTransaction
                        : window.actionUrl.createTransaction;

                    axios
                        .post(url, this.getRequest())
                        .then(function(response) {
                            const data = response.data;
                            this.showLoadingModal = false;
                            this.clearAll();

                            if (data.status.type === ""Error"")
                                throw data.status.message;

                            if (this.isPayment && data.collections.length > 0)
                                this");
                WriteLiteral(@".printTransaction(data.collections[0].id);

                            if (!this.isPayment || this.isSelectedTransaction)
                                this.fetchHoldTransaction();

                        }.bind(this))
                        .catch(axiosCatch);
                },
                printTransaction: function(transactionId) {
                    this.showPrintWindow = true;

                    const printUrl = window.actionUrl.print + ""/"" + transactionId;
                    const printWindow = window.open(printUrl, """", ""width=700,height=400"");

                    printWindow.focus();
                    printWindow.addEventListener(""beforeunload"",
                        function() {
                            this.showPrintWindow = false;
                        }.bind(this),
                        false);
                },
                selectTransaction: function(transactionId) {
                    this.clearAll();

                    const selectedIndex ");
                WriteLiteral(@"= this.holdTransactions
                        .map(function(ht) { return ht.id })
                        .indexOf(transactionId);

                    this.selectedTransaction = this.holdTransactions[selectedIndex];
                    this.transactionNotes = this.selectTransaction.notes;

                    this.selectedTransaction.selectedProducts
                        .forEach(function(sp, index) {
                            for (let i = 0; i < sp.quantity; i++)
                                this.selectProduct(sp.product);

                            if (sp.notes !== null && sp.notes !== """")
                                this.selectedProducts[index].notes = sp.notes;
                        }.bind(this));

                    const discountCode = this.selectedTransaction.discount.code;
                    if (discountCode !== """" && discountCode !== null) {
                        this.discount.code = discountCode;
                        this.fetchDiscount();
               ");
                WriteLiteral(@"     }

                    this.selectTab(0);
                },
                clearAll: function() {
                    this.clearSelectedProducts();
                    this.setDiscount(undefined);
                    this.selectedTransaction = null;
                    this.selectedPaymentType = """";
                    this.transactionNotes = """";
                }
            },
            computed: {
                filteredProducts: function() {
                    return this.products
                        .filter(function(p) {
                            if (this.activeCategory === ""All"") return p;

                            return p.categoryName === this.activeCategory;
                        }.bind(this))
                        .filter(function(p) {
                            return p.name.toLowerCase().includes(this.searchKeyword.toLowerCase());
                        }.bind(this));
                },
                totalPrice: function() {
                    ");
                WriteLiteral(@"if (!(this.selectedProducts.length > 0))
                        return 0;

                    return this.selectedProducts
                        .reduce(function(currVal, sp) { return currVal += sp.totalPrice }, 0);
                },
                totalPriceWithDiscount: function() {
                    if (this.discountValue > this.totalPrice) {
                        swal(""Sorry, discount cannot be applied"", """", ""warning"");
                        this.setDiscount(undefined);

                        return this.totalPrice;
                    }

                    return this.totalPrice - this.discountValue;
                },
                discountValue: function() {
                    if (this.discount.type === ""Percentage"")
                        return this.totalPrice * this.discount.value / 100;

                    return this.discount.value;
                },
                isAnySelectedProducts: function() {
                    return this.selectedProducts.leng");
                WriteLiteral(@"th > 0;
                },
                isAllowSubmit: function() {
                    return this.isPayment
                        ? this.selectedPaymentType !== """"
                        : this.transactionNotes !== """";
                },
                isDiscountCodeEmpty: function() {
                    return this.discount.code === """";
                },
                isSelectedTransaction: function() {
                    return this.selectedTransaction !== null;
                }
            },
            mounted: function() {
                this.selectTab(0);
                this.fetchHoldTransaction();
            }
        });
    </script>
");
                EndContext();
            }
            );
            BeginContext(18282, 22, true);
            WriteLiteral("\r\n<input type=\"hidden\"");
            EndContext();
            BeginWriteAttribute("value", " value=\'", 18304, "\'", 18345, 1);
#line 477 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
WriteAttributeValue("", 18312, Json.Serialize(Model.Categories), 18312, 33, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(18346, 46, true);
            WriteLiteral(" id=\"productCategory\" />\r\n<input type=\"hidden\"");
            EndContext();
            BeginWriteAttribute("value", " value=\'", 18392, "\'", 18431, 1);
#line 478 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
WriteAttributeValue("", 18400, Json.Serialize(Model.Products), 18400, 31, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(18432, 38, true);
            WriteLiteral(" id=\"product\" />\r\n<input type=\"hidden\"");
            EndContext();
            BeginWriteAttribute("value", " value=\'", 18470, "\'", 18507, 1);
#line 479 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
WriteAttributeValue("", 18478, Json.Serialize(paymentTypes), 18478, 29, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(18508, 429, true);
            WriteLiteral(@" id=""paymentType"" />

<div class=""d-flex mb-3"">
    <h3 class=""mr-auto"">Sales Register</h3>
</div>

<div class=""card mb-4"" id=""salesRegister"">
    <div class=""card-header"" v-cloak>
        <ul class=""nav nav-tabs card-header-tabs"">
            <li class=""nav-item"" v-for=""(t, index) in tabs"">
                <a class=""nav-link pointer"" 
                   :class=""{ active : t === selectedTab }"" 
                   ");
            EndContext();
            BeginContext(18938, 570, true);
            WriteLiteral(@"@click=""selectTab(index)"">
                    {{t}}
                </a>
            </li>
        </ul>
    </div>
    <div class=""card-body"" v-cloak>
        <template v-if=""selectedTab === tabs[0]"">
            <div class=""alert alert-warning d-flex"" v-if=""isSelectedTransaction"">
                You opened transaction {{selectedTransaction.id}} - &nbsp;<em>{{selectedTransaction.notes}}</em>
                <button type=""button"" 
                        class=""btn btn-times-close btn-warning border-0 ml-auto bg-transparent"" 
                        ");
            EndContext();
            BeginContext(19509, 717, true);
            WriteLiteral(@"@click=""clearAll"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""row"">
                <div class=""col"">
                    <div class=""form-group"">
                        <input class=""form-control"" type=""text"" placeholder=""Search Product Here..."" v-model=""searchKeyword""/>
                    </div>
                    <div class=""row"">
                        <div class=""col-3"">
                            <ul class=""list-group"">
                                <li v-for=""c in categories"" 
                                    :class=""{ active : c.name === activeCategory }"" 
                                    ");
            EndContext();
            BeginContext(20227, 561, true);
            WriteLiteral(@"@click=""selectCategory(c.name)""
                                    class=""list-group-item pointer"">
                                    {{c.name}}
                                </li>
                            </ul>
                        </div>
                        <div class=""col"">
                            <div class=""row"" v-if=""filteredProducts.length > 0"">
                                <div class=""product-item col-4 mb-4"" v-for=""p in filteredProducts"">
                                    <div class=""card pointer"" :title=""p.name"" ");
            EndContext();
            BeginContext(20789, 93, true);
            WriteLiteral("@click=\"selectProduct(p)\">\r\n                                        <div class=\"card-img-top\"");
            EndContext();
            BeginWriteAttribute(":style", " :style=\"", 20882, "\"", 20945, 9);
            WriteAttributeValue("", 20891, "{backgroundImage:", 20891, 17, true);
            WriteAttributeValue(" ", 20908, "\'url(", 20909, 6, true);
#line 527 "D:\Nanda\SKRIPSI\aplikasi\Uarung\Uarung.Web\Views\Transaction\SalesRegister.cshtml"
WriteAttributeValue("", 20914, apiHost, 20914, 8, false);

#line default
#line hidden
            WriteAttributeValue("", 20922, "\'", 20922, 1, true);
            WriteAttributeValue(" ", 20923, "+", 20924, 2, true);
            WriteAttributeValue(" ", 20925, "p.images[0]", 20926, 12, true);
            WriteAttributeValue(" ", 20937, "+", 20938, 2, true);
            WriteAttributeValue(" ", 20939, "\')\'", 20940, 4, true);
            WriteAttributeValue(" ", 20943, "}", 20944, 2, true);
            EndWriteAttribute();
            BeginContext(20946, 1159, true);
            WriteLiteral(@"></div>
                                        <div class=""card-body pt-1 pb-1"">
                                            <p class=""card-title text-truncate mb-1"">{{p.name}}</p>
                                            <p class=""card-text"">{{ p.price | toCurrency }}</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <h5 class=""mt-3"" v-else>
                                There's nothing in here..
                            </h5>
                        </div>
                    </div>
                </div>
                <div class=""col-5"">
                    <div class=""card bg-light"">
                        <div class=""card-header bg-transparent border-bottom-0 d-flex"">
                            <h5 class=""font-weight-normal mb-0 mr-auto"">Current Sales</h5>
                            <template v-if=""isAnySelectedProducts"">
      ");
            WriteLiteral("                          <button class=\"btn btn-outline-secondary btn-sm lh-1 align-bottom\" \r\n                                        ");
            EndContext();
            BeginContext(22106, 265, true);
            WriteLiteral(@"@click=""clearSelectedProducts"">
                                    Clear
                                </button>
                                <button class=""btn btn-outline-secondary btn-sm ml-2 lh-1 align-bottom"" 
                                        ");
            EndContext();
            BeginContext(22372, 355, true);
            WriteLiteral(@"@click=""showConfirmModal = true,isPayment = false""
                                        v-if=""!isSelectedTransaction"">
                                    Hold
                                </button>
                                <button class=""btn btn-outline-secondary btn-sm ml-2 lh-1 align-bottom"" 
                                        ");
            EndContext();
            BeginContext(22728, 1459, true);
            WriteLiteral(@"@click=""isPayment = false,submitTransaction()""
                                        v-else>
                                    Update
                                </button>
                            </template>
                        </div>
                        <div class=""card-body"">
                            <template v-if=""isAnySelectedProducts"">
                                <table class=""table table-sm"">
                                    <tr>
                                        <th class=""border-top-0 text-left"" style=""width: 170px"">Item</th>
                                        <th class=""border-top-0"" style=""width: 70px"">Quantity</th>
                                        <th class=""border-top-0"">Price</th>
                                        <th class=""border-top-0"" style=""width: 64px""></th>
                                    </tr>
                                    <template v-for=""(sp, index) in selectedProducts"">
                                    ");
            WriteLiteral(@"    <tr>
                                            <td class=""text-left align-middle"">{{ sp.product.name }}</td>
                                            <td class=""align-middle"">
                                                <input type=""number""
                                                    class=""form-control form-control-sm form-control-plaintext text-center""
                                                    ");
            EndContext();
            BeginContext(24188, 681, true);
            WriteLiteral(@"@input=""onQuantityUpdate(index)""
                                                    v-model.number=""sp.quantity""/>
                                            </td>
                                            <td class=""align-middle"">{{ sp.totalPrice | toCurrency }}</td>
                                            <td class=""align-middle"">
                                                <button type=""button""
                                                        title=""add notes""
                                                        class=""btn btn-sm btn-outline-secondary border-0 lh-0 p-1 rounded-circle""
                                                        ");
            EndContext();
            BeginContext(24870, 1584, true);
            WriteLiteral(@"@click=""sp.showNotes = !sp.showNotes"">
                                                    <svg v-if=""!sp.showNotes"" xmlns=""http://www.w3.org/2000/svg""width=""24"" height=""24"" viewBox=""0 0 24 24"" fill=""none"" stroke=""currentColor"" stroke-width=""2"" stroke-linecap=""round"" stroke-linejoin=""round""
                                                        class=""feather feather-edit-2 sc-dnqmqq jxshSx"">
                                                        <polygon points=""16 3 21 8 8 21 3 21 3 16 16 3""></polygon>
                                                    </svg>
                                                    <svg v-else-if=""sp.showNotes"" class=""feather feather-edit sc-dnqmqq jxshSx"" xmlns=""http://www.w3.org/2000/svg"" width=""24"" height=""24"" viewBox=""0 0 24 24"" fill=""none"" stroke=""currentColor"" stroke-width=""2"" stroke-linecap=""round"" stroke-linejoin=""round"">
                                                        <path d=""M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34""></path>
   ");
            WriteLiteral(@"                                                     <polygon points=""18 2 22 6 12 16 8 16 8 12 18 2""></polygon>
                                                    </svg>
                                                </button>
                                                <button type=""button""
                                                        title=""remove""
                                                        class=""btn btn-outline-danger btn-sm border-0 rounded-circle lh-0 p-1""
                                                        ");
            EndContext();
            BeginContext(26455, 2165, true);
            WriteLiteral(@"@click=""removeSelectedProduct(index)"">
                                                    <svg xmlns=""http://www.w3.org/2000/svg"" width=""24"" height=""24"" viewBox=""0 0 24 24"" fill=""none"" stroke=""currentColor"" stroke-width=""2"" stroke-linecap=""round"" stroke-linejoin=""round"" class=""feather feather-x"">
                                                        <line x1=""18"" y1=""6"" x2=""6"" y2=""18""></line>
                                                        <line x1=""6"" y1=""6"" x2=""18"" y2=""18""></line>
                                                    </svg>
                                                </button>
                                            </td>
                                        </tr>
                                        <tr v-if=""sp.showNotes"">
                                            <td colspan=""4"" class=""border-top-0"">
                                                <input type=""text"" 
                                                    class=""form-control form-control-s");
            WriteLiteral(@"m""
                                                    v-model=""sp.notes""/>
                                            </td>
                                        </tr>
                                    </template>
                                </table>
                                <div class=""input-group mb-3"" v-if=""!discount.isValid"">
                                    <input type=""text"" 
                                            class=""form-control form-control-sm pl-2 pr-2"" 
                                            placeholder=""Apply discount code here...""
                                            v-model=""discount.code""
                                            :class=""{ 'form-control-plaintext' : isDiscountCodeEmpty }""
                                            :readonly=""discount.isValid""/>
                                    <div class=""input-group-append"" v-if=""!isDiscountCodeEmpty"">
                                        <button type=""button"" 
                   ");
            WriteLiteral("                             class=\"btn btn-outline-primary btn-sm\"\r\n                                                ");
            EndContext();
            BeginContext(28621, 898, true);
            WriteLiteral(@"@click=""fetchDiscount"">
                                            Apply
                                        </button>
                                    </div>
                                </div>
                                <div class=""d-flex align-items-center border mb-3 p-2 rounded"" v-else>
                                    <p class=""mr-auto mb-0"">
                                        Discount ({{discount.code}})
                                    </p>
                                    <p class=""mb-0 text-success"">
                                        - {{ discountValue | toCurrency }}
                                    </p>
                                    <button type=""button"" 
                                        class=""btn btn-outline-danger btn-sm border-0 rounded-circle btn-times-close ml-2""
                                        ");
            EndContext();
            BeginContext(29520, 456, true);
            WriteLiteral(@"@click=""setDiscount(undefined)"">
                                        <span>&times;</span>
                                    </button>
                                </div>
                            </template>
                            <p v-else>
                                Please choose products...
                            </p>
                            <button class=""btn btn-primary btn-block btn-lg"" v-if=""totalPrice > 0"" ");
            EndContext();
            BeginContext(29977, 451, true);
            WriteLiteral(@"@click=""showConfirmModal = true,isPayment = true"">
                                Charge <span class=""font-weight-bold"">{{ totalPriceWithDiscount | toCurrency }}</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </template>
        <div v-else-if=""selectedTab === tabs[1]"">
            <opened-bills :hold-transactions=""holdTransactions"" ");
            EndContext();
            BeginContext(30429, 495, true);
            WriteLiteral(@"@on-select=""selectTransaction($event)""></opened-bills>
        </div>
        <modal v-if=""showLoadingModal"" modal-dialog-cssclass=""modal-sm loading-modal"">
            <div slot=""body"" class=""d-flex justify-content-center align-items-center"">
                <div class=""loader""></div>
                <h5 class=""font-weight-bold mb-0 text-black-50 ml-2"">
                    Loading...
                </h5>
            </div>
        </modal>
        <modal v-if=""showConfirmModal"" ");
            EndContext();
            BeginContext(30925, 14, true);
            WriteLiteral("@onOkClick=\"\" ");
            EndContext();
            BeginContext(30940, 367, true);
            WriteLiteral(@"@request-close=""showConfirmModal = false"">
            <template v-if=""isPayment"">
                <h5 class=""mb-0"" slot=""header"">Payment Confirmation</h5>
                <div class=""form-group"" slot=""body"">
                    <label>Payment Type</label>
                    <select class=""form-control"" v-model=""selectedPaymentType"">
                        ");
            EndContext();
            BeginContext(31307, 52, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "567839af29de409187ad581e250008ce", async() => {
                BeginContext(31333, 17, true);
                WriteLiteral("Please select one");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("disabled", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(31359, 26, true);
            WriteLiteral("\r\n                        ");
            EndContext();
            BeginContext(31385, 62, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4c8c8903efe8407fbcd77323a483698f", async() => {
                BeginContext(31432, 6, true);
                WriteLiteral("{{pt}}");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(31447, 540, true);
            WriteLiteral(@"
                    </select>
                </div>
            </template>
            <template v-else>
                <h5 class=""mb-0"" slot=""header"">Hold Transaction</h5>
                <div class=""form-group"" slot=""body"">
                    <label>Notes</label>
                    <input type=""text"" class=""form-control"" v-model=""transactionNotes""/>
                </div>
            </template>
            <template slot=""footer"">
                <button class=""btn btn-outline-secondary"" 
                        ");
            EndContext();
            BeginContext(31988, 201, true);
            WriteLiteral("@click=\"showConfirmModal = false, selectedPaymentType = \'\', transactionNotes = \'\'\">\r\n                    Cancel\r\n                </button>\r\n                <button class=\"btn\"\r\n                        ");
            EndContext();
            BeginContext(32190, 608, true);
            WriteLiteral(@"@click=""submitTransaction()""
                        :class=""{'btn-success' : isAllowSubmit, 'btn-secondary' : !isAllowSubmit}""
                        :disabled=""!isAllowSubmit"">
                    <template v-if=""isPayment"">
                        Received <span class=""font-weight-bold"">{{ totalPriceWithDiscount | toCurrency }}</span>
                    </template>
                    <template v-else>
                        Submit
                    </template>
                </button>
            </template>
        </modal>
        <div class=""modal-mask"" v-if=""showPrintWindow"" ");
            EndContext();
            BeginContext(32799, 59, true);
            WriteLiteral("@click=\"showPrintWindow = false\"></div>\r\n    </div>\r\n</div>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<SalesRegisterViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
