@model SalesRegisterViewModel

@{
    ViewData[Constant.ViewDataKey.Title] = "Sales Register";
    var apiHost = ViewData[Constant.ConfigKey.ApiHost];

    var paymentTypes = new[]
    {
        Constant.PaymentType.Cash,
        Constant.PaymentType.Card,
        Constant.PaymentType.Other
    };
}

@section ScriptHeader
{
    <style>
        .product-item .card-img-top{
            height: 100px;
            background-position: center;
            background-size: cover;
        }
        .pointer {
            cursor: pointer
        }

        [v-cloak] {
            display: none;
        }

        .modal-mask {
            position: fixed;
            z-index: 9998;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, .5);
            display: table;
            transition: opacity .3s ease;
        }

        .modal-enter {
            opacity: 0;
        }

        .modal-leave-active {
            opacity: 0;
        }

        .modal-enter .modal-container,
        .modal-leave-active .modal-container {
            -webkit-transform: scale(1.1);
            transform: scale(1.1);
        }

        .loading-modal .modal-header, 
        .loading-modal .modal-footer {
            display: none;
        }

        .loader {
            border: 3px solid #ddd;
            border-radius: 999px;
            border-top: 3px solid #007bff;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% {
                 transform: rotate(0);
            }
            100% {
                 transform: rotate(360deg);
            }
        }
    </style>
}

@section ScriptFooter
{
    <script type="text/javascript" src="~/lib/vue.js"></script>
    <script type="text/javascript" src="~/lib/axios.min.js"></script>
    <script type="text/javascript" src="~/lib/sweetalert.min.js"></script>

    <script type="text/x-template" id="modal-template">
        <transition name="modal">
            <div class="modal-mask">
                <div class="modal-dialog" :class="modalDialogCssclass">
                    <div class="modal-content">
                        <div class="modal-header" v-if="hasHeaderSlot">
                            <slot name="header"></slot>
                        </div>
                        <div class="modal-body">
                            <slot name="body"></slot>
                        </div>
                        <div class="modal-footer" v-if="hasFooterSlot">
                            <slot name="footer"></slot>
                        </div>
                    </div>
                </div>
            </div>
        </transition>
    </script>

    <script type="text/x-template" id="opened-bills">
        <table class="table" v-if="isAnyTransaction">
            <thead>
                <tr>
                    <th class="border-top-0">#</th>
                    <th class="border-top-0">Notes</th>
                    <th class="border-top-0">Id</th>
                    <th class="border-top-0">Total Price</th>
                </tr>
            </thead>
            <tr v-for="(t, index) in holdTransactions">
                <td>{{index + 1}}</td>
                <td>{{t.notes}}</td>
                <td>
                    <button type="btn" class="btn btn-link btn-sm" @@click="$emit('on-select', t.id)">
                        {{t.id}}
                    </button>
                </td>
                <td>{{(t.totalPrice - t.discount.value) | toCurrency}}</td>
            </tr>
        </table>
        <h5 class="mt-2" v-else>There's no opened bills...</h5>
    </script>

    <script type="text/javascript">
        const dataCategories = JSON.parse(document.getElementById("productCategory").value);
        const dataProducts = JSON.parse(document.getElementById("product").value);
        const dataPaymentTypes = JSON.parse(document.getElementById("paymentType").value);

        window.actionUrl = {
            getDiscount: "@Url.Action("Get", "Discount")",
            createTransaction: "@Url.Action("Submit", "Transaction", new {id = string.Empty})",
            updateTransaction: "@Url.Action("Submit", "Transaction", new {id = "update"})",
            getTransactionHold: "@Url.Action("GetHoldOnly", "Transaction")",
            print: "@Url.Action("Print", "Transaction")"
        }

        function axiosCatch(err) {
            const errorMessage = typeof (err) === "string"
                ? err
                : "sorry, some error occured";

            swal(errorMessage, "", "warning");
        }

        Vue.filter("toCurrency",
            function(val) {
                if (typeof(val) !== "number")
                    return val;

                return new Intl.NumberFormat().format(val);

            });

        Vue.component("opened-bills",
            {
                template: "#opened-bills",
                props: {
                    holdTransactions: {
                        type: Array,
                        default: []
                    }
                },
                computed: {
                    isAnyTransaction: function() {
                        return this.holdTransactions.length > 0;
                    }
                }
            });

        Vue.component("modal",
            {
                template: "#modal-template",
                props: ["modalDialogCssclass"],
                computed: {
                    hasHeaderSlot: function() {
                        return !!this.$slots.header;
                    },
                    hasFooterSlot: function() {
                        return !!this.$slots.footer;
                    }
                }
            });

        const app = new Vue({
            el: "#salesRegister",
            data: {
                tabs: ["Current", "Open Bills"],
                categories: dataCategories,
                products: dataProducts,
                paymentTypes: dataPaymentTypes,
                holdTransactions: [],
                activeCategory: dataCategories[0].name,
                selectedTab: "",
                searchKeyword: "",
                selectedProducts: [],
                selectedPaymentType: "",
                selectedTransaction: null,
                transactionNotes: "",
                discount: {
                    code: "",
                    type: "",
                    value: 0,
                    isValid: false
                },
                isPayment: true,
                showConfirmModal: false,
                showLoadingModal: false,
                showPrintWindow: false,
            },
            methods: {
                selectTab: function(tabIndex) {
                    this.selectedTab = this.tabs[tabIndex];
                },
                selectCategory: function(categoryName) {
                    this.activeCategory = categoryName;
                },
                selectProduct: function(product) {
                    const isAny = this.selectedProducts
                        .filter(function(p) { return p.product.id === product.id; })
                        .length >
                        0;

                    if (isAny) {
                        const index = this.selectedProducts
                            .map(function(p) { return p.product.id })
                            .indexOf(product.id);

                        this.selectedProducts[index].quantity += 1;
                        this.onQuantityUpdate(index);
                    } else {
                        this.selectedProducts = this.selectedProducts
                            .concat({
                                product: product,
                                quantity: 1,
                                notes: null,
                                showNotes: false,
                                totalPrice: product.price
                            });
                    }
                },
                removeSelectedProduct: function(index) {
                    this.selectedProducts = this.selectedProducts
                        .filter(function(f, i) { return i !== index });
                },
                clearSelectedProducts: function() {
                    this.selectedProducts = [];
                },
                onQuantityUpdate: function(index) {
                    const value = this.selectedProducts[index].quantity;

                    if (value <= 0 || isNaN(value))
                        this.selectedProducts[index].quantity = 1;
                    else if (value > 50)
                        this.selectedProducts[index].quantity = 50;

                    const totalPrice = this.selectedProducts[index].product.price *
                        this.selectedProducts[index].quantity;
                    this.selectedProducts[index].totalPrice = totalPrice;
                },
                setDiscount: function(discount) {
                    if (discount === undefined)
                        discount = {
                            isValid: false,
                            code: "",
                            type: "",
                            value: 0,
                        };

                    this.discount.isValid = discount.isValid;
                    this.discount.type = discount.type;
                    this.discount.value = discount.value;
                    this.discount.code = discount.code;
                },
                fetchDiscount: function() {
                    this.showLoadingModal = true;
                    const url = window.actionUrl.getDiscount + "/" + this.discount.code;

                    axios.get(url)
                        .then(function(response) {
                            this.showLoadingModal = false;
                            const isOk = response.data.status.type === "Success";

                            if (isOk) {
                                const discount = response.data.collections[0];
                                this.setDiscount(Object.assign(discount, { isValid: true }));
                            } else
                                this.setDiscount(undefined);

                        }.bind(this));
                },
                fetchHoldTransaction: function() {
                    axios
                        .get(window.actionUrl.getTransactionHold)
                        .then(function(response) {
                            const data = response.data;

                            if (data.status.type === "Error")
                                throw data.status.message;

                            this.holdTransactions = data.collections;
                        }.bind(this))
                        .catch(axiosCatch);
                },
                getRequest: function () {
                    const paymentStatus = this.isPayment
                        ? "@Constant.PaymentStatus.Paid"
                        : "@Constant.PaymentStatus.Hold";

                    const request = {
                        id: "",
                        paymentStatus: paymentStatus,
                        paymentType: this.selectedPaymentType,
                        selectedProducts: this.selectedProducts
                            .map(function(sp) {
                                return {
                                    quantity: sp.quantity,
                                    notes: sp.notes,
                                    product: {
                                        id: sp.product.id
                                    }
                                }
                            }),
                        discount: {
                            code: this.discount.code
                        },
                        notes: this.transactionNotes
                    };

                    if (this.isSelectedTransaction) {
                        request.id = this.selectedTransaction.id;
                        request.totalPrice = this.totalPrice;
                    }

                    return request;
                },
                submitTransaction: function() {
                    this.showConfirmModal = false;
                    this.showLoadingModal = true;
                    
                    const url = this.isSelectedTransaction
                        ? window.actionUrl.updateTransaction
                        : window.actionUrl.createTransaction;

                    axios
                        .post(url, this.getRequest())
                        .then(function(response) {
                            const data = response.data;
                            this.showLoadingModal = false;
                            this.clearAll();

                            if (data.status.type === "Error")
                                throw data.status.message;

                            if (this.isPayment && data.collections.length > 0)
                                this.printTransaction(data.collections[0].id);

                            if (!this.isPayment || this.isSelectedTransaction)
                                this.fetchHoldTransaction();

                        }.bind(this))
                        .catch(axiosCatch);
                },
                printTransaction: function(transactionId) {
                    this.showPrintWindow = true;

                    const printUrl = window.actionUrl.print + "/" + transactionId;
                    const printWindow = window.open(printUrl, "", "width=700,height=400");

                    printWindow.focus();
                    printWindow.addEventListener("beforeunload",
                        function() {
                            this.showPrintWindow = false;
                        }.bind(this),
                        false);
                },
                selectTransaction: function(transactionId) {
                    this.clearAll();

                    const selectedIndex = this.holdTransactions
                        .map(function(ht) { return ht.id })
                        .indexOf(transactionId);

                    this.selectedTransaction = this.holdTransactions[selectedIndex];
                    this.transactionNotes = this.selectTransaction.notes;

                    this.selectedTransaction.selectedProducts
                        .forEach(function(sp, index) {
                            for (let i = 0; i < sp.quantity; i++)
                                this.selectProduct(sp.product);

                            if (sp.notes !== null && sp.notes !== "")
                                this.selectedProducts[index].notes = sp.notes;
                        }.bind(this));

                    const discountCode = this.selectedTransaction.discount.code;
                    if (discountCode !== "" && discountCode !== null) {
                        this.discount.code = discountCode;
                        this.fetchDiscount();
                    }

                    this.selectTab(0);
                },
                clearAll: function() {
                    this.clearSelectedProducts();
                    this.setDiscount(undefined);
                    this.selectedTransaction = null;
                    this.selectedPaymentType = "";
                    this.transactionNotes = "";
                }
            },
            computed: {
                filteredProducts: function() {
                    return this.products
                        .filter(function(p) {
                            if (this.activeCategory === "All") return p;

                            return p.categoryName === this.activeCategory;
                        }.bind(this))
                        .filter(function(p) {
                            return p.name.toLowerCase().includes(this.searchKeyword.toLowerCase());
                        }.bind(this));
                },
                totalPrice: function() {
                    if (!(this.selectedProducts.length > 0))
                        return 0;

                    return this.selectedProducts
                        .reduce(function(currVal, sp) { return currVal += sp.totalPrice }, 0);
                },
                totalPriceWithDiscount: function() {
                    if (this.discountValue > this.totalPrice) {
                        swal("Sorry, discount cannot be applied", "", "warning");
                        this.setDiscount(undefined);

                        return this.totalPrice;
                    }

                    return this.totalPrice - this.discountValue;
                },
                discountValue: function() {
                    if (this.discount.type === "Percentage")
                        return this.totalPrice * this.discount.value / 100;

                    return this.discount.value;
                },
                isAnySelectedProducts: function() {
                    return this.selectedProducts.length > 0;
                },
                isAllowSubmit: function() {
                    return this.isPayment
                        ? this.selectedPaymentType !== ""
                        : this.transactionNotes !== "";
                },
                isDiscountCodeEmpty: function() {
                    return this.discount.code === "";
                },
                isSelectedTransaction: function() {
                    return this.selectedTransaction !== null;
                }
            },
            mounted: function() {
                this.selectTab(0);
                this.fetchHoldTransaction();
            }
        });
    </script>
}

<input type="hidden" value='@Json.Serialize(Model.Categories)' id="productCategory" />
<input type="hidden" value='@Json.Serialize(Model.Products)' id="product" />
<input type="hidden" value='@Json.Serialize(paymentTypes)' id="paymentType" />

<div class="d-flex mb-3">
    <h3 class="mr-auto">Sales Register</h3>
</div>

<div class="card mb-4" id="salesRegister">
    <div class="card-header" v-cloak>
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item" v-for="(t, index) in tabs">
                <a class="nav-link pointer" 
                   :class="{ active : t === selectedTab }" 
                   @@click="selectTab(index)">
                    {{t}}
                </a>
            </li>
        </ul>
    </div>
    <div class="card-body" v-cloak>
        <template v-if="selectedTab === tabs[0]">
            <div class="alert alert-warning d-flex" v-if="isSelectedTransaction">
                You opened transaction {{selectedTransaction.id}} - &nbsp;<em>{{selectedTransaction.notes}}</em>
                <button type="button" 
                        class="btn btn-times-close btn-warning border-0 ml-auto bg-transparent" 
                        @@click="clearAll">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <input class="form-control" type="text" placeholder="Search Product Here..." v-model="searchKeyword"/>
                    </div>
                    <div class="row">
                        <div class="col-3">
                            <ul class="list-group">
                                <li v-for="c in categories" 
                                    :class="{ active : c.name === activeCategory }" 
                                    @@click="selectCategory(c.name)"
                                    class="list-group-item pointer">
                                    {{c.name}}
                                </li>
                            </ul>
                        </div>
                        <div class="col">
                            <div class="row" v-if="filteredProducts.length > 0">
                                <div class="product-item col-4 mb-4" v-for="p in filteredProducts">
                                    <div class="card pointer" :title="p.name" @@click="selectProduct(p)">
                                        <div class="card-img-top" :style="{backgroundImage: 'url(@apiHost' + p.images[0] + ')' }"></div>
                                        <div class="card-body pt-1 pb-1">
                                            <p class="card-title text-truncate mb-1">{{p.name}}</p>
                                            <p class="card-text">{{ p.price | toCurrency }}</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <h5 class="mt-3" v-else>
                                There's nothing in here..
                            </h5>
                        </div>
                    </div>
                </div>
                <div class="col-5">
                    <div class="card bg-light">
                        <div class="card-header bg-transparent border-bottom-0 d-flex">
                            <h5 class="font-weight-normal mb-0 mr-auto">Current Sales</h5>
                            <template v-if="isAnySelectedProducts">
                                <button class="btn btn-outline-secondary btn-sm lh-1 align-bottom" 
                                        @@click="clearSelectedProducts">
                                    Clear
                                </button>
                                <button class="btn btn-outline-secondary btn-sm ml-2 lh-1 align-bottom" 
                                        @@click="showConfirmModal = true,isPayment = false"
                                        v-if="!isSelectedTransaction">
                                    Hold
                                </button>
                                <button class="btn btn-outline-secondary btn-sm ml-2 lh-1 align-bottom" 
                                        @@click="isPayment = false,submitTransaction()"
                                        v-else>
                                    Update
                                </button>
                            </template>
                        </div>
                        <div class="card-body">
                            <template v-if="isAnySelectedProducts">
                                <table class="table table-sm">
                                    <tr>
                                        <th class="border-top-0 text-left" style="width: 170px">Item</th>
                                        <th class="border-top-0" style="width: 70px">Quantity</th>
                                        <th class="border-top-0">Price</th>
                                        <th class="border-top-0" style="width: 64px"></th>
                                    </tr>
                                    <template v-for="(sp, index) in selectedProducts">
                                        <tr>
                                            <td class="text-left align-middle">{{ sp.product.name }}</td>
                                            <td class="align-middle">
                                                <input type="number"
                                                    class="form-control form-control-sm form-control-plaintext text-center"
                                                    @@input="onQuantityUpdate(index)"
                                                    v-model.number="sp.quantity"/>
                                            </td>
                                            <td class="align-middle">{{ sp.totalPrice | toCurrency }}</td>
                                            <td class="align-middle">
                                                <button type="button"
                                                        title="add notes"
                                                        class="btn btn-sm btn-outline-secondary border-0 lh-0 p-1 rounded-circle"
                                                        @@click="sp.showNotes = !sp.showNotes">
                                                    <svg v-if="!sp.showNotes" xmlns="http://www.w3.org/2000/svg"width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                                                        class="feather feather-edit-2 sc-dnqmqq jxshSx">
                                                        <polygon points="16 3 21 8 8 21 3 21 3 16 16 3"></polygon>
                                                    </svg>
                                                    <svg v-else-if="sp.showNotes" class="feather feather-edit sc-dnqmqq jxshSx" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                                        <path d="M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"></path>
                                                        <polygon points="18 2 22 6 12 16 8 16 8 12 18 2"></polygon>
                                                    </svg>
                                                </button>
                                                <button type="button"
                                                        title="remove"
                                                        class="btn btn-outline-danger btn-sm border-0 rounded-circle lh-0 p-1"
                                                        @@click="removeSelectedProduct(index)">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x">
                                                        <line x1="18" y1="6" x2="6" y2="18"></line>
                                                        <line x1="6" y1="6" x2="18" y2="18"></line>
                                                    </svg>
                                                </button>
                                            </td>
                                        </tr>
                                        <tr v-if="sp.showNotes">
                                            <td colspan="4" class="border-top-0">
                                                <input type="text" 
                                                    class="form-control form-control-sm"
                                                    v-model="sp.notes"/>
                                            </td>
                                        </tr>
                                    </template>
                                </table>
                                <div class="input-group mb-3" v-if="!discount.isValid">
                                    <input type="text" 
                                            class="form-control form-control-sm pl-2 pr-2" 
                                            placeholder="Apply discount code here..."
                                            v-model="discount.code"
                                            :class="{ 'form-control-plaintext' : isDiscountCodeEmpty }"
                                            :readonly="discount.isValid"/>
                                    <div class="input-group-append" v-if="!isDiscountCodeEmpty">
                                        <button type="button" 
                                                class="btn btn-outline-primary btn-sm"
                                                @@click="fetchDiscount">
                                            Apply
                                        </button>
                                    </div>
                                </div>
                                <div class="d-flex align-items-center border mb-3 p-2 rounded" v-else>
                                    <p class="mr-auto mb-0">
                                        Discount ({{discount.code}})
                                    </p>
                                    <p class="mb-0 text-success">
                                        - {{ discountValue | toCurrency }}
                                    </p>
                                    <button type="button" 
                                        class="btn btn-outline-danger btn-sm border-0 rounded-circle btn-times-close ml-2"
                                        @@click="setDiscount(undefined)">
                                        <span>&times;</span>
                                    </button>
                                </div>
                            </template>
                            <p v-else>
                                Please choose products...
                            </p>
                            <button class="btn btn-primary btn-block btn-lg" v-if="totalPrice > 0" @@click="showConfirmModal = true,isPayment = true">
                                Charge <span class="font-weight-bold">{{ totalPriceWithDiscount | toCurrency }}</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </template>
        <div v-else-if="selectedTab === tabs[1]">
            <opened-bills :hold-transactions="holdTransactions" @@on-select="selectTransaction($event)"></opened-bills>
        </div>
        <modal v-if="showLoadingModal" modal-dialog-cssclass="modal-sm loading-modal">
            <div slot="body" class="d-flex justify-content-center align-items-center">
                <div class="loader"></div>
                <h5 class="font-weight-bold mb-0 text-black-50 ml-2">
                    Loading...
                </h5>
            </div>
        </modal>
        <modal v-if="showConfirmModal" @@onOkClick="" @@request-close="showConfirmModal = false">
            <template v-if="isPayment">
                <h5 class="mb-0" slot="header">Payment Confirmation</h5>
                <div class="form-group" slot="body">
                    <label>Payment Type</label>
                    <select class="form-control" v-model="selectedPaymentType">
                        <option disabled value="">Please select one</option>
                        <option v-for="pt in paymentTypes" :value="pt">{{pt}}</option>
                    </select>
                </div>
            </template>
            <template v-else>
                <h5 class="mb-0" slot="header">Hold Transaction</h5>
                <div class="form-group" slot="body">
                    <label>Notes</label>
                    <input type="text" class="form-control" v-model="transactionNotes"/>
                </div>
            </template>
            <template slot="footer">
                <button class="btn btn-outline-secondary" 
                        @@click="showConfirmModal = false, selectedPaymentType = '', transactionNotes = ''">
                    Cancel
                </button>
                <button class="btn"
                        @@click="submitTransaction()"
                        :class="{'btn-success' : isAllowSubmit, 'btn-secondary' : !isAllowSubmit}"
                        :disabled="!isAllowSubmit">
                    <template v-if="isPayment">
                        Received <span class="font-weight-bold">{{ totalPriceWithDiscount | toCurrency }}</span>
                    </template>
                    <template v-else>
                        Submit
                    </template>
                </button>
            </template>
        </modal>
        <div class="modal-mask" v-if="showPrintWindow" @@click="showPrintWindow = false"></div>
    </div>
</div>